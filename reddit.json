{"kind": "Listing", "data": {"after": "t3_1h9qjjj", "dist": 27, "modhash": null, "geo_filter": null, "children": [{"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "# Weekly Thread: What's Everyone Working On This Week? \ud83d\udee0\ufe0f\n\nHello /r/Python! It's time to share what you've been working on! Whether it's a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you're up to!\n\n## How it Works:\n\n1. **Show &amp; Tell**: Share your current projects, completed works, or future ideas.\n2. **Discuss**: Get feedback, find collaborators, or just chat about your project.\n3. **Inspire**: Your project might inspire someone else, just as you might get inspired here.\n\n## Guidelines:\n\n* Feel free to include as many details as you'd like. Code snippets, screenshots, and links are all welcome.\n* Whether it's your job, your hobby, or your passion project, all Python-related work is welcome here.\n\n## Example Shares:\n\n1. **Machine Learning Model**: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!\n2. **Web Scraping**: Built a script to scrape and analyze news articles. It's helped me understand media bias better.\n3. **Automation**: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!\n\nLet's build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Sunday Daily Thread: What's everyone working on this week?", "link_flair_richtext": [{"a": ":pythonLogo:", "e": "emoji", "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"}, {"e": "text", "t": " Daily Thread"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "daily-thread", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1h95vc3", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.83, "author_flair_background_color": null, "subreddit_type": "public", "ups": 10, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": ":pythonLogo: Daily Thread", "can_mod_post": false, "score": 10, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733616010.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: What&amp;#39;s Everyone Working On This Week? \ud83d\udee0\ufe0f&lt;/h1&gt;\n\n&lt;p&gt;Hello &lt;a href=\"/r/Python\"&gt;/r/Python&lt;/a&gt;! It&amp;#39;s time to share what you&amp;#39;ve been working on! Whether it&amp;#39;s a work-in-progress, a completed masterpiece, or just a rough idea, let us know what you&amp;#39;re up to!&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Show &amp;amp; Tell&lt;/strong&gt;: Share your current projects, completed works, or future ideas.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Discuss&lt;/strong&gt;: Get feedback, find collaborators, or just chat about your project.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Inspire&lt;/strong&gt;: Your project might inspire someone else, just as you might get inspired here.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Feel free to include as many details as you&amp;#39;d like. Code snippets, screenshots, and links are all welcome.&lt;/li&gt;\n&lt;li&gt;Whether it&amp;#39;s your job, your hobby, or your passion project, all Python-related work is welcome here.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Shares:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Machine Learning Model&lt;/strong&gt;: Working on a ML model to predict stock prices. Just cracked a 90% accuracy rate!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Web Scraping&lt;/strong&gt;: Built a script to scrape and analyze news articles. It&amp;#39;s helped me understand media bias better.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Automated my home lighting with Python and Raspberry Pi. My life has never been easier!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s build and grow together! Share your journey and learn from others. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#00a6a5", "id": "1h95vc3", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 12, "send_replies": false, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1h95vc3/sunday_daily_thread_whats_everyone_working_on/", "stickied": true, "url": "https://www.reddit.com/r/Python/comments/1h95vc3/sunday_daily_thread_whats_everyone_working_on/", "subreddit_subscribers": 1301717, "created_utc": 1733616010.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "# Weekly Thread: Beginner Questions \ud83d\udc0d\n\nWelcome to our Beginner Questions thread! Whether you're new to Python or just looking to clarify some basics, this is the thread for you.\n\n## How it Works:\n\n1. **Ask Anything**: Feel free to ask any Python-related question. There are no bad questions here!\n2. **Community Support**: Get answers and advice from the community.\n3. **Resource Sharing**: Discover tutorials, articles, and beginner-friendly resources.\n\n## Guidelines:\n\n* This thread is specifically for **beginner questions**. For more advanced queries, check out our [Advanced Questions Thread](#advanced-questions-thread-link).\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **What is the difference between a list and a tuple?**\n2. **How do I read a CSV file in Python?**\n3. **What are Python decorators and how do I use them?**\n4. **How do I install a Python package using pip?**\n5. **What is a virtual environment and why should I use one?**\n\nLet's help each other learn Python! \ud83c\udf1f", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Wednesday Daily Thread: Beginner questions", "link_flair_richtext": [{"a": ":pythonLogo:", "e": "emoji", "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"}, {"e": "text", "t": " Daily Thread"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "daily-thread", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbg7qh", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.76, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": ":pythonLogo: Daily Thread", "can_mod_post": false, "score": 2, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733875208.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Thread: Beginner Questions \ud83d\udc0d&lt;/h1&gt;\n\n&lt;p&gt;Welcome to our Beginner Questions thread! Whether you&amp;#39;re new to Python or just looking to clarify some basics, this is the thread for you.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Anything&lt;/strong&gt;: Feel free to ask any Python-related question. There are no bad questions here!&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Community Support&lt;/strong&gt;: Get answers and advice from the community.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Sharing&lt;/strong&gt;: Discover tutorials, articles, and beginner-friendly resources.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is specifically for &lt;strong&gt;beginner questions&lt;/strong&gt;. For more advanced queries, check out our &lt;a href=\"#advanced-questions-thread-link\"&gt;Advanced Questions Thread&lt;/a&gt;.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;What is the difference between a list and a tuple?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I read a CSV file in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are Python decorators and how do I use them?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do I install a Python package using pip?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What is a virtual environment and why should I use one?&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s help each other learn Python! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76", "width": 512, "height": 288}, "resolutions": [{"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16", "width": 320, "height": 180}], "variants": {}, "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#00a6a5", "id": "1hbg7qh", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 5, "send_replies": false, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbg7qh/wednesday_daily_thread_beginner_questions/", "stickied": true, "url": "https://www.reddit.com/r/Python/comments/1hbg7qh/wednesday_daily_thread_beginner_questions/", "subreddit_subscribers": 1301717, "created_utc": 1733875208.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hello Python community!\n\nWe're excited to share our milestone 10th edition of the **Top Python Libraries and tools**, continuing our tradition of exploring the Python ecosystem for the most innovative developments of the year.\n\nBased on community feedback (thank you!), we've made a significant change this year: we've split our selections into **General Use** and **AI/ML/Data** categories, ensuring something valuable for every Python developer. Our team has carefully reviewed hundreds of libraries to bring you the most impactful tools of 2024.\n\n**Read the full article with detailed analysis here**: [https://tryolabs.com/blog/top-python-libraries-2024](https://tryolabs.com/blog/top-python-libraries-2024)\n\nHere's a preview of our top picks:\n\n**General Use**:\n\n1. [**uv**](https://github.com/astral-sh/uv) \u2014 Lightning-fast Python package manager in Rust\n2. [**Tach**](https://github.com/gauge-sh/tach) \u2014 Tame module dependencies in large projects\n3. [**Whenever**](https://github.com/ariebovenberg/whenever) \u2014 Intuitive datetime library for Python\n4. [**WAT**](https://github.com/igrek51/wat) \u2014 Powerful object inspection tool\n5. [**peepDB**](https://github.com/PeepDB-dev/peepdb) \u2014 Peek at your database effortlessly\n6. [**Crawlee**](https://github.com/apify/crawlee-python) \u2014 Modern web scraping toolkit\n7. [**PGQueuer**](https://github.com/janbjorge/pgqueuer) \u2014 PostgreSQL-powered job queue\n8. [**streamable**](https://github.com/ebonnal/streamable) \u2014 Elegant stream processing for iterables\n9. [**RightTyper**](https://github.com/RightTyper/RightTyper) \u2014 Generate static types automatically\n10. [**Rio**](https://github.com/rio-labs/rio) \u2014 Modern web apps in pure Python\n\n**AI / ML / Data**:\n\n1. [**BAML**](https://github.com/BoundaryML/baml) \u2014 Domain-specific language for LLMs\n2. [**marimo**](https://github.com/marimo-team/marimo) \u2014 Notebooks reimagined\n3. [**OpenHands**](https://github.com/All-Hands-AI/OpenHands) \u2014 Powerful agent for code development\n4. [**Crawl4AI**](https://github.com/unclecode/crawl4ai) \u2014 Intelligent web crawling for AI\n5. [**LitServe**](https://github.com/Lightning-AI/LitServe) \u2014 Effortless AI model serving\n6. [**Mirascope**](https://github.com/Mirascope/mirascope) \u2014 Unified LLM interface\n7. [**Docling**](https://github.com/DS4SD/docling) and [**Surya**](https://github.com/VikParuchuri/surya) \u2014 Transform documents to structured data\n8. [**DataChain**](https://github.com/iterative/datachain) \u2014 Complete data pipeline for AI\n9. [**Narwhals**](https://github.com/narwhals-dev/narwhals) \u2014 Compatibility layer for dataframe libraries\n10. [**PydanticAI**](https://github.com/pydantic/pydantic-ai) \u2014 Pydantic for LLM Agents\n\nOur selection criteria remain focused on innovation, active maintenance, and broad impact potential. We've included detailed analyses and practical examples for many libraries in the full article.\n\nSpecial thanks to all the developers and teams behind these libraries. Your work continues to drive Python's evolution and success! \ud83d\udc0d\u2728\n\n**What are your thoughts on this year's selections? Any notable libraries we should consider for next year?** Your feedback helps shape future editions!", "author_fullname": "t2_142qfg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "The hand-picked selection of the best Python libraries and tools of 2024 \u2013 10th edition!", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbs4t8", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.89, "author_flair_background_color": null, "subreddit_type": "public", "ups": 70, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 70, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733919274.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello Python community!&lt;/p&gt;\n\n&lt;p&gt;We&amp;#39;re excited to share our milestone 10th edition of the &lt;strong&gt;Top Python Libraries and tools&lt;/strong&gt;, continuing our tradition of exploring the Python ecosystem for the most innovative developments of the year.&lt;/p&gt;\n\n&lt;p&gt;Based on community feedback (thank you!), we&amp;#39;ve made a significant change this year: we&amp;#39;ve split our selections into &lt;strong&gt;General Use&lt;/strong&gt; and &lt;strong&gt;AI/ML/Data&lt;/strong&gt; categories, ensuring something valuable for every Python developer. Our team has carefully reviewed hundreds of libraries to bring you the most impactful tools of 2024.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Read the full article with detailed analysis here&lt;/strong&gt;: &lt;a href=\"https://tryolabs.com/blog/top-python-libraries-2024\"&gt;https://tryolabs.com/blog/top-python-libraries-2024&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s a preview of our top picks:&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;General Use&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/astral-sh/uv\"&gt;&lt;strong&gt;uv&lt;/strong&gt;&lt;/a&gt; \u2014 Lightning-fast Python package manager in Rust&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/gauge-sh/tach\"&gt;&lt;strong&gt;Tach&lt;/strong&gt;&lt;/a&gt; \u2014 Tame module dependencies in large projects&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/ariebovenberg/whenever\"&gt;&lt;strong&gt;Whenever&lt;/strong&gt;&lt;/a&gt; \u2014 Intuitive datetime library for Python&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/igrek51/wat\"&gt;&lt;strong&gt;WAT&lt;/strong&gt;&lt;/a&gt; \u2014 Powerful object inspection tool&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/PeepDB-dev/peepdb\"&gt;&lt;strong&gt;peepDB&lt;/strong&gt;&lt;/a&gt; \u2014 Peek at your database effortlessly&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/apify/crawlee-python\"&gt;&lt;strong&gt;Crawlee&lt;/strong&gt;&lt;/a&gt; \u2014 Modern web scraping toolkit&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/janbjorge/pgqueuer\"&gt;&lt;strong&gt;PGQueuer&lt;/strong&gt;&lt;/a&gt; \u2014 PostgreSQL-powered job queue&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/ebonnal/streamable\"&gt;&lt;strong&gt;streamable&lt;/strong&gt;&lt;/a&gt; \u2014 Elegant stream processing for iterables&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/RightTyper/RightTyper\"&gt;&lt;strong&gt;RightTyper&lt;/strong&gt;&lt;/a&gt; \u2014 Generate static types automatically&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/rio-labs/rio\"&gt;&lt;strong&gt;Rio&lt;/strong&gt;&lt;/a&gt; \u2014 Modern web apps in pure Python&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;&lt;strong&gt;AI / ML / Data&lt;/strong&gt;:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/BoundaryML/baml\"&gt;&lt;strong&gt;BAML&lt;/strong&gt;&lt;/a&gt; \u2014 Domain-specific language for LLMs&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/marimo-team/marimo\"&gt;&lt;strong&gt;marimo&lt;/strong&gt;&lt;/a&gt; \u2014 Notebooks reimagined&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/All-Hands-AI/OpenHands\"&gt;&lt;strong&gt;OpenHands&lt;/strong&gt;&lt;/a&gt; \u2014 Powerful agent for code development&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/unclecode/crawl4ai\"&gt;&lt;strong&gt;Crawl4AI&lt;/strong&gt;&lt;/a&gt; \u2014 Intelligent web crawling for AI&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/Lightning-AI/LitServe\"&gt;&lt;strong&gt;LitServe&lt;/strong&gt;&lt;/a&gt; \u2014 Effortless AI model serving&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/Mirascope/mirascope\"&gt;&lt;strong&gt;Mirascope&lt;/strong&gt;&lt;/a&gt; \u2014 Unified LLM interface&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/DS4SD/docling\"&gt;&lt;strong&gt;Docling&lt;/strong&gt;&lt;/a&gt; and &lt;a href=\"https://github.com/VikParuchuri/surya\"&gt;&lt;strong&gt;Surya&lt;/strong&gt;&lt;/a&gt; \u2014 Transform documents to structured data&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/iterative/datachain\"&gt;&lt;strong&gt;DataChain&lt;/strong&gt;&lt;/a&gt; \u2014 Complete data pipeline for AI&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/narwhals-dev/narwhals\"&gt;&lt;strong&gt;Narwhals&lt;/strong&gt;&lt;/a&gt; \u2014 Compatibility layer for dataframe libraries&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/pydantic/pydantic-ai\"&gt;&lt;strong&gt;PydanticAI&lt;/strong&gt;&lt;/a&gt; \u2014 Pydantic for LLM Agents&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Our selection criteria remain focused on innovation, active maintenance, and broad impact potential. We&amp;#39;ve included detailed analyses and practical examples for many libraries in the full article.&lt;/p&gt;\n\n&lt;p&gt;Special thanks to all the developers and teams behind these libraries. Your work continues to drive Python&amp;#39;s evolution and success! \ud83d\udc0d\u2728&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What are your thoughts on this year&amp;#39;s selections? Any notable libraries we should consider for next year?&lt;/strong&gt; Your feedback helps shape future editions!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?auto=webp&amp;s=676f3ac621fd68b6ab25473c3347bc667d33246e", "width": 1772, "height": 629}, "resolutions": [{"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e5ad9a28255c629a690f25b55ddbeee7be942ec3", "width": 108, "height": 38}, {"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=0f97b6f9fa2789bc3ca8d20a1ac0c8e887b2cb84", "width": 216, "height": 76}, {"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2f25bbe2f7f12f14a82ab49a55cb7327796ddda0", "width": 320, "height": 113}, {"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=3f1707b9c052d4cb1411c5bb06da510d05ca0d0f", "width": 640, "height": 227}, {"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=9da8153fa8fa8d66bd6db417c67465ad059ec256", "width": 960, "height": 340}, {"url": "https://external-preview.redd.it/RfY_LCnu2Owc3HAjefkvFzuPYRQ4bd7i6wed2-7g668.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f66eade6d11171b693b1a8f56498a8d5ae3ff1ca", "width": 1080, "height": 383}], "variants": {}, "id": "50j-M1R42RZ7rKDRJ4nTmpBOkei-NCQkkSa-v8JVfgA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hbs4t8", "is_robot_indexable": true, "report_reasons": null, "author": "dekked_", "discussion_type": null, "num_comments": 13, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbs4t8/the_handpicked_selection_of_the_best_python/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbs4t8/the_handpicked_selection_of_the_best_python/", "subreddit_subscribers": 1301717, "created_utc": 1733919274.0, "num_crossposts": 1, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "# Description\n\nTreeline is a code analysis and visualization tool designed to help developers understand the quality and structure of their Python codebases. It does some complexity metrics, detects code smells, and generates an interactive HTML-based visualization for relatively easy exploration. I hope it will give developers some insights into architectural dependencies, complexity hotspots, and maintainability issues.\n\n# Links\n\n* [https://github.com/duriantaco/treeline](https://github.com/duriantaco/treeline)\n* [https://pypi.org/project/treeline/](https://pypi.org/project/treeline/)\n\n# What My Project Does\n\n* **Dependency Analysis**: Identifies which modules import others, which classes belong to which modules, and which functions call which, creating a complete dependency graph.\n* **Metrics Computation**: Calculates cyclomatic complexity, cognitive complexity, maintainability index, function length, and code smell occurrences.\n* **Visualization**: Renders an interactive HTML report using D3.js, where each node represents a module, class, or function. You can hover over nodes to see detailed metrics, search for specific elements.\n* **Quality Reporting**: Produces Markdown and HTML reports summarizing complexity hotspots.\n\n# Target Audience\n\n* Anyone using Python\n\n# Extra Details\n\nStarted of as a simple ASCII tree generator. Promised to add more stuff so here i am.\n\n# Conclusion\n\nHopefully you guys will find it useful. If you think it's a stupid idea or ways to improve, do let me know too. I'm open to criticisms and constructive feedback.  If you find any bugs please open an issue on github or you can just contact me here. **Lastly, if you'll love to work on this together to expand this further, i'm more than happy to do so.** Just drop me a message!", "author_fullname": "t2_618pjzkm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Did an open source tool for code exploration", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbnasw", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.88, "author_flair_background_color": null, "subreddit_type": "public", "ups": 20, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 20, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1733899006.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733898094.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;Treeline is a code analysis and visualization tool designed to help developers understand the quality and structure of their Python codebases. It does some complexity metrics, detects code smells, and generates an interactive HTML-based visualization for relatively easy exploration. I hope it will give developers some insights into architectural dependencies, complexity hotspots, and maintainability issues.&lt;/p&gt;\n\n&lt;h1&gt;Links&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/duriantaco/treeline\"&gt;https://github.com/duriantaco/treeline&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://pypi.org/project/treeline/\"&gt;https://pypi.org/project/treeline/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Dependency Analysis&lt;/strong&gt;: Identifies which modules import others, which classes belong to which modules, and which functions call which, creating a complete dependency graph.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Metrics Computation&lt;/strong&gt;: Calculates cyclomatic complexity, cognitive complexity, maintainability index, function length, and code smell occurrences.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Visualization&lt;/strong&gt;: Renders an interactive HTML report using D3.js, where each node represents a module, class, or function. You can hover over nodes to see detailed metrics, search for specific elements.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Quality Reporting&lt;/strong&gt;: Produces Markdown and HTML reports summarizing complexity hotspots.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Anyone using Python&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Extra Details&lt;/h1&gt;\n\n&lt;p&gt;Started of as a simple ASCII tree generator. Promised to add more stuff so here i am.&lt;/p&gt;\n\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n\n&lt;p&gt;Hopefully you guys will find it useful. If you think it&amp;#39;s a stupid idea or ways to improve, do let me know too. I&amp;#39;m open to criticisms and constructive feedback.  If you find any bugs please open an issue on github or you can just contact me here. &lt;strong&gt;Lastly, if you&amp;#39;ll love to work on this together to expand this further, i&amp;#39;m more than happy to do so.&lt;/strong&gt; Just drop me a message!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?auto=webp&amp;s=394961368b46d11541d637ebc87b84b9d0075f95", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=eb8db9e8588fab46461d2bccbfbec9afd9ead802", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=2ff76598be2632653cef12f74384c14b43dfce07", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=3821b729e51c73ff36f06001a43f6e99f26a6133", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=116eb9ba68b14890b869c0029d0eb0aeeb0f19ee", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=52bda3f17852faa8b8e50eeb2dca4c9cd429bd0c", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/j6otiB58M78UO5_Lk59N8o3q3v_pD7iziLfqDnTVe3A.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=233cd8eae2fcd532c522b4af1d7cbb03d9c658ac", "width": 1080, "height": 540}], "variants": {}, "id": "kpZFC7LiTENnqwW3W7bNovoa8xwj3QaTCODTW3LxBxI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1hbnasw", "is_robot_indexable": true, "report_reasons": null, "author": "papersashimi", "discussion_type": null, "num_comments": 1, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbnasw/did_an_open_source_tool_for_code_exploration/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbnasw/did_an_open_source_tool_for_code_exploration/", "subreddit_subscribers": 1301717, "created_utc": 1733898094.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "## What My Project Does\n\nI've created a tool that extracts favicons from any website. It works by parsing HTML pages, checking fallback routes for icons, and even supports inline base64-encoded images. The tool can also verify availability, guess missing icon sizes, and download the favicons for further processing. It aims to streamline favicon retrieval for web scraping, data analysis or just curious exploration.\n\n## Links\n\n- Source code: https://github.com/AlexMili/extract_favicon/\n- Documentation: https://alexmili.github.io/extract_favicon/\n\n\n## Target Audience\n\nThe project is designed for developers and data enthusiasts who work with web metadata. Whether you\u2019re building a crawler, enhancing a web directory, or simply analyzing website branding. My intention is to maintain and improve it, making it stable and ready for production use cases.\n\n\n## Comparison\n\nWhile there are other favicon extraction libraries out there, many of them have become unmaintained or lack features like asynchronous support, thorough availability checks, and automatic size guessing. My project is actively maintained, built with modern Python standards, and provides a more robust, flexible solution than many existing alternatives.", "author_fullname": "t2_ce95gmp0h", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Introducing My New Favicon Extraction Tool", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_1hbtf03", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 2, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733923592.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h2&gt;What My Project Does&lt;/h2&gt;\n\n&lt;p&gt;I&amp;#39;ve created a tool that extracts favicons from any website. It works by parsing HTML pages, checking fallback routes for icons, and even supports inline base64-encoded images. The tool can also verify availability, guess missing icon sizes, and download the favicons for further processing. It aims to streamline favicon retrieval for web scraping, data analysis or just curious exploration.&lt;/p&gt;\n\n&lt;h2&gt;Links&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Source code: &lt;a href=\"https://github.com/AlexMili/extract_favicon/\"&gt;https://github.com/AlexMili/extract_favicon/&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;Documentation: &lt;a href=\"https://alexmili.github.io/extract_favicon/\"&gt;https://alexmili.github.io/extract_favicon/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Target Audience&lt;/h2&gt;\n\n&lt;p&gt;The project is designed for developers and data enthusiasts who work with web metadata. Whether you\u2019re building a crawler, enhancing a web directory, or simply analyzing website branding. My intention is to maintain and improve it, making it stable and ready for production use cases.&lt;/p&gt;\n\n&lt;h2&gt;Comparison&lt;/h2&gt;\n\n&lt;p&gt;While there are other favicon extraction libraries out there, many of them have become unmaintained or lack features like asynchronous support, thorough availability checks, and automatic size guessing. My project is actively maintained, built with modern Python standards, and provides a more robust, flexible solution than many existing alternatives.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?auto=webp&amp;s=8c98e1d4dc694b8e53edba818f199e5679c83d4e", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=07e99caa50c36327737f8e8d682d979cb579a004", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=c163ad1f2f8d950fdf8b2fc451385e94d68c51c2", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=11c06b49c4a807a01d0a15ba5a28dad752337c5f", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=2d4c563a2fe240860100e4d19f59df8e7c291a39", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=7cba706ba33454723f4356a8af8ebe8219e139c8", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/CuW2GDJqZaW01PkBuDqa67coizFtecfiWerVC81jdng.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2f9b5088bb646b2534d3f25c84da0fed9648e6ea", "width": 1080, "height": 540}], "variants": {}, "id": "q8WoHp2CWZ7i-5fKimYy9n8dykHXa8K4KzmCRC4RvC4"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1hbtf03", "is_robot_indexable": true, "report_reasons": null, "author": "Beneficial_Expert448", "discussion_type": null, "num_comments": 0, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbtf03/introducing_my_new_favicon_extraction_tool/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbtf03/introducing_my_new_favicon_extraction_tool/", "subreddit_subscribers": 1301717, "created_utc": 1733923592.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hey guys! Scraping is something we've all needed at some point, whether for personal or professional reasons. But nowadays I feel like I get blocked immediately if I go to any website and tbh I don't want to setup complex patches and go through all that stuff for like a tiny thing. Nodriver solved this problem for me.\n\nHere's an article I wrote about getting started with nodriver and how it faces up with the competition - https://www.hyperbrowser.ai/blog/nodriver_:_The_next_step_in_web_automation\n", "author_fullname": "t2_jf27f", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Nodriver - The next step in web scraping", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbea0n", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.71, "author_flair_background_color": null, "subreddit_type": "public", "ups": 19, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 19, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733869903.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey guys! Scraping is something we&amp;#39;ve all needed at some point, whether for personal or professional reasons. But nowadays I feel like I get blocked immediately if I go to any website and tbh I don&amp;#39;t want to setup complex patches and go through all that stuff for like a tiny thing. Nodriver solved this problem for me.&lt;/p&gt;\n\n&lt;p&gt;Here&amp;#39;s an article I wrote about getting started with nodriver and how it faces up with the competition - &lt;a href=\"https://www.hyperbrowser.ai/blog/nodriver_:_The_next_step_in_web_automation\"&gt;https://www.hyperbrowser.ai/blog/nodriver_:_The_next_step_in_web_automation&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "1hbea0n", "is_robot_indexable": true, "report_reasons": null, "author": "MeetYourCreator", "discussion_type": null, "num_comments": 2, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbea0n/nodriver_the_next_step_in_web_scraping/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbea0n/nodriver_the_next_step_in_web_scraping/", "subreddit_subscribers": 1301717, "created_utc": 1733869903.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "For those of you who have taken (and passed) the PCAP, did you receive anything other than the paper printout after the exam? (I know the PCAP isn't particularly useful, but my company offered me a 3% raise if I passed it so...) I'm just wondering if I should expect an email with some official looking certification or if I should just show the exam printout to my company.", "author_fullname": "t2_i7fbecxt", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Proof of PCAP Certification?", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbq85s", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.6, "author_flair_background_color": null, "subreddit_type": "public", "ups": 1, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 1, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733911362.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;For those of you who have taken (and passed) the PCAP, did you receive anything other than the paper printout after the exam? (I know the PCAP isn&amp;#39;t particularly useful, but my company offered me a 3% raise if I passed it so...) I&amp;#39;m just wondering if I should expect an email with some official looking certification or if I should just show the exam printout to my company.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hbq85s", "is_robot_indexable": true, "report_reasons": null, "author": "ambassador_spock1701", "discussion_type": null, "num_comments": 1, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbq85s/proof_of_pcap_certification/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbq85s/proof_of_pcap_certification/", "subreddit_subscribers": 1301717, "created_utc": 1733911362.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hi everyone,\n\nAm part of a small IT group, we have started developing our new DW in databricks, part of the initiative is automating the ingestion of data from 3rd party data sources.\nI have a working Python code locally on my PC using selenium but I can\u2019t get to make this work on Databricks.\nThere are tons of resources on the web but most of the blogs am reading on, people are getting stuck here and there.\nCan you point me in the right direction.\nSorry if this is a repeated question.\n\nThank you very much", "author_fullname": "t2_cjbrkl8wg", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Need to run selenium on databricks ", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbbpf9", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 8, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 8, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733863285.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi everyone,&lt;/p&gt;\n\n&lt;p&gt;Am part of a small IT group, we have started developing our new DW in databricks, part of the initiative is automating the ingestion of data from 3rd party data sources.\nI have a working Python code locally on my PC using selenium but I can\u2019t get to make this work on Databricks.\nThere are tons of resources on the web but most of the blogs am reading on, people are getting stuck here and there.\nCan you point me in the right direction.\nSorry if this is a repeated question.&lt;/p&gt;\n\n&lt;p&gt;Thank you very much&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hbbpf9", "is_robot_indexable": true, "report_reasons": null, "author": "Haunting_Lab6079", "discussion_type": null, "num_comments": 10, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbbpf9/need_to_run_selenium_on_databricks/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbbpf9/need_to_run_selenium_on_databricks/", "subreddit_subscribers": 1301717, "created_utc": 1733863285.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hi r/Python community!\n\nI've been working on a project combining Finite State Machines and Large Language Models. I posted this a while ago, and have been making improvements/tweaks, including turning it into a package available on PyPi.\n\nWhat My Project Does:  \nThis project provides a framework for building conversational agents using a Finite State Machine (FSM) powered by LLMs like OpenAI GPT. It aims to create structured tools like step-by-step teaching systems, customer support bots, and multi-step memory games while addressing issues like hallucinations, loss of context, and unpredictability. I have a few example usages in the repo.\n\nTarget Audience:  \nThis is currently an experimental setup, and also part of a research project I am doing for university. For now it is meant for developers and experimenters mainly. Requires an OpenAI API key (currently tested on gpt-4o-mini and 4o).\n\nComparison:  \nUnlike typical LLM-based chatbots, this combines FSM with LLMs to enforce structured, predictable conversations, making it ideal for use cases requiring adherence to predefined paths.\n\nIf anyone is interested I would love to hear your feedback and thoughts! The repo is here: [https://github.com/jsz-05/LLM-State-Machine](https://github.com/jsz-05/LLM-State-Machine)\n\nCheers!", "author_fullname": "t2_2s2cb4cm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Feedback for project creating conversational agents using a Finite State Machine (FSM) and LLMs", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbjvh7", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.5, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733886147.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt; community!&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;ve been working on a project combining Finite State Machines and Large Language Models. I posted this a while ago, and have been making improvements/tweaks, including turning it into a package available on PyPi.&lt;/p&gt;\n\n&lt;p&gt;What My Project Does:&lt;br/&gt;\nThis project provides a framework for building conversational agents using a Finite State Machine (FSM) powered by LLMs like OpenAI GPT. It aims to create structured tools like step-by-step teaching systems, customer support bots, and multi-step memory games while addressing issues like hallucinations, loss of context, and unpredictability. I have a few example usages in the repo.&lt;/p&gt;\n\n&lt;p&gt;Target Audience:&lt;br/&gt;\nThis is currently an experimental setup, and also part of a research project I am doing for university. For now it is meant for developers and experimenters mainly. Requires an OpenAI API key (currently tested on gpt-4o-mini and 4o).&lt;/p&gt;\n\n&lt;p&gt;Comparison:&lt;br/&gt;\nUnlike typical LLM-based chatbots, this combines FSM with LLMs to enforce structured, predictable conversations, making it ideal for use cases requiring adherence to predefined paths.&lt;/p&gt;\n\n&lt;p&gt;If anyone is interested I would love to hear your feedback and thoughts! The repo is here: &lt;a href=\"https://github.com/jsz-05/LLM-State-Machine\"&gt;https://github.com/jsz-05/LLM-State-Machine&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Cheers!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?auto=webp&amp;s=5531181a50de9cbbf4d3403b966cba0d13fb8d94", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=65454f7ef3dff90c5868d231e560610ac2334c4f", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=3b15072ce9c4c7785ac011a7055a9003d11b99ab", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=2c1dade60563843bfa047e249cbe6e5a0caad778", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=dac4504c0d4ad81d2265d75dfc04f44004bb091c", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=77f9c276143ea854a2c67d72da828d8b0fad95f1", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/HqZU6yywMNNgsvYCdffLm9G-LpyO33oTN7IPRgnYCjs.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f0e33ce732a191fc00eae20dc676c3c03656b559", "width": 1080, "height": 540}], "variants": {}, "id": "4bdBwkPQAaryILXvTuxqvXa_IHIzGONQReqPGmS2kEg"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1hbjvh7", "is_robot_indexable": true, "report_reasons": null, "author": "JeffZ117", "discussion_type": null, "num_comments": 3, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbjvh7/feedback_for_project_creating_conversational/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbjvh7/feedback_for_project_creating_conversational/", "subreddit_subscribers": 1301717, "created_utc": 1733886147.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "I am working on transitioning some data projects to the web. I know an okay amount of HTML CSS and a bit of JS so I could do it that way. I would rather build a couple sites just using python using flash or django. I just can't seem to find a repo or tutorial thats not super basic or advanced. Anyone have one that falls in the middle area they would be willing to share?  ", "author_fullname": "t2_om2hs", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Looking for a mid-ish level web project in django or flash more info below ", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hb8f7h", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.78, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 7, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733855032.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I am working on transitioning some data projects to the web. I know an okay amount of HTML CSS and a bit of JS so I could do it that way. I would rather build a couple sites just using python using flash or django. I just can&amp;#39;t seem to find a repo or tutorial thats not super basic or advanced. Anyone have one that falls in the middle area they would be willing to share?  &lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hb8f7h", "is_robot_indexable": true, "report_reasons": null, "author": "Druber13", "discussion_type": null, "num_comments": 9, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hb8f7h/looking_for_a_midish_level_web_project_in_django/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hb8f7h/looking_for_a_midish_level_web_project_in_django/", "subreddit_subscribers": 1301717, "created_utc": 1733855032.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hi r/Python,\n\nover the last six months I have build PdfDing. You can find it on\u00a0[GitHub](https://github.com/mrmn2/PdfDing).\n\n**What My Project Does**\n\nPdfDing is a selfhosted PDF manager and viewer offering a seamless user experience on multiple devices. Some of its features include:\n\n* Remembers current position - continue where you stopped reading on any device\n* Share PDFs with an external audience via a link or a QR Code. Shared PDFs can be access controlled\n* Dark Mode, colored themes and custom theme colors\n* Inverted color mode for reading PDFs\n* SSO support via OIDC\n\n\u00a0I have used the following tech stack:\n\n* the web app is build using Python (Django)\n* The frondend is build using Alpine.js, htmx, jQuery and Tailwind CSS\n* Mozilla's PDF.js is used for viewing PDF files in the browser\n\n**Target Audience**\n\nHomelabs or businesses who want a self-hosted solution for their PDFs.\n\n**Comparison**\n\nThere are solutions like self-hosted ebook readers. However, they are using the inbuilt PDF viewer of the browser. This works fine on desktops and laptops but on smartphones it will simply download the PDF file and not display it in the browser (at least it is like this on my mobile devices). This solution also does not allow you to continue reading where you stopped on another device.\n\nMost solutions also do not allow users to upload files, as there is an admin curating the content. Furthermore, I wanted a minimal and resource-friendly solution that allows me to share PDFs with an external audience.\n\n**Final remarks**\n\nIf you like PdfDing I would be really happy over a star on [GitHub](https://github.com/mrmn2/PdfDing). As the project is open source, if anyone wants to contribute you are welcome to do so!", "author_fullname": "t2_1dsl6uie6k", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "I build PdfDing with Python", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1haxeb7", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.84, "author_flair_background_color": null, "subreddit_type": "public", "ups": 49, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 49, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733819862.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi &lt;a href=\"/r/Python\"&gt;r/Python&lt;/a&gt;,&lt;/p&gt;\n\n&lt;p&gt;over the last six months I have build PdfDing. You can find it on\u00a0&lt;a href=\"https://github.com/mrmn2/PdfDing\"&gt;GitHub&lt;/a&gt;.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;PdfDing is a selfhosted PDF manager and viewer offering a seamless user experience on multiple devices. Some of its features include:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Remembers current position - continue where you stopped reading on any device&lt;/li&gt;\n&lt;li&gt;Share PDFs with an external audience via a link or a QR Code. Shared PDFs can be access controlled&lt;/li&gt;\n&lt;li&gt;Dark Mode, colored themes and custom theme colors&lt;/li&gt;\n&lt;li&gt;Inverted color mode for reading PDFs&lt;/li&gt;\n&lt;li&gt;SSO support via OIDC&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;\u00a0I have used the following tech stack:&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;the web app is build using Python (Django)&lt;/li&gt;\n&lt;li&gt;The frondend is build using Alpine.js, htmx, jQuery and Tailwind CSS&lt;/li&gt;\n&lt;li&gt;Mozilla&amp;#39;s PDF.js is used for viewing PDF files in the browser&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Homelabs or businesses who want a self-hosted solution for their PDFs.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;There are solutions like self-hosted ebook readers. However, they are using the inbuilt PDF viewer of the browser. This works fine on desktops and laptops but on smartphones it will simply download the PDF file and not display it in the browser (at least it is like this on my mobile devices). This solution also does not allow you to continue reading where you stopped on another device.&lt;/p&gt;\n\n&lt;p&gt;Most solutions also do not allow users to upload files, as there is an admin curating the content. Furthermore, I wanted a minimal and resource-friendly solution that allows me to share PDFs with an external audience.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Final remarks&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;If you like PdfDing I would be really happy over a star on &lt;a href=\"https://github.com/mrmn2/PdfDing\"&gt;GitHub&lt;/a&gt;. As the project is open source, if anyone wants to contribute you are welcome to do so!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?auto=webp&amp;s=2d9c0f5aff9b2e56524ad6ccf2af7df8d364a4b6", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=357fa06a8135b3d7ef8c9cb64e6d038ddc0ed909", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d9af3306ab8f2148b1a5b7668c82337f73238f96", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=5039045ebd5936735d6b68d1a5641063404786da", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=2256b6147f0ad25f7ddcc7331f1628626f01cea3", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=0a99ef5a4fa235cfd4773562890f7b54fd912125", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/W_im_lpSkHPxAsJHXtsTPILcPLRhXfaSLykPPEekNmI.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=2f67428d32681f19c82078c9f2edf20677660fb1", "width": 1080, "height": 540}], "variants": {}, "id": "ATW1os2WRo6QA5Cx9_8tbD2s6VDTQx5Fhut8rlkkOQs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1haxeb7", "is_robot_indexable": true, "report_reasons": null, "author": "Mindless-View-3071", "discussion_type": null, "num_comments": 4, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1haxeb7/i_build_pdfding_with_python/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1haxeb7/i_build_pdfding_with_python/", "subreddit_subscribers": 1301717, "created_utc": 1733819862.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "I created a python framework that easily enables users to create reactive desktop applications with Python backend and HTML frontend.\n\n**What My Project Does**\n\nEasily enables the user to create desktop applications with a Python backend and a HTML frontend. Using the frameworks functions listed in the documentation reactive variables, state-management and dynamic UI-s can be created with ease.\n\nFeel free to use it if you see fit. Also im very much open to discussion as this is my first public project that i published, errors have a very high chance of appering.\n\n[PyPI pype-framework](https://pypi.org/project/pype-framework/)\n\n[Pype Github](https://github.com/kokasmark/Pype)\n\n  \nedit: I used a post template so i can post here and forgot the delete the post templates text...", "author_fullname": "t2_deibchhm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Pype - Python Desktop App Framework", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hb0jr4", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.79, "author_flair_background_color": null, "subreddit_type": "public", "ups": 16, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 16, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1733833636.0, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733833365.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I created a python framework that easily enables users to create reactive desktop applications with Python backend and HTML frontend.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Easily enables the user to create desktop applications with a Python backend and a HTML frontend. Using the frameworks functions listed in the documentation reactive variables, state-management and dynamic UI-s can be created with ease.&lt;/p&gt;\n\n&lt;p&gt;Feel free to use it if you see fit. Also im very much open to discussion as this is my first public project that i published, errors have a very high chance of appering.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://pypi.org/project/pype-framework/\"&gt;PyPI pype-framework&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/kokasmark/Pype\"&gt;Pype Github&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;edit: I used a post template so i can post here and forgot the delete the post templates text...&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1hb0jr4", "is_robot_indexable": true, "report_reasons": null, "author": "kaakaaskaa", "discussion_type": null, "num_comments": 7, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hb0jr4/pype_python_desktop_app_framework/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hb0jr4/pype_python_desktop_app_framework/", "subreddit_subscribers": 1301717, "created_utc": 1733833365.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Ive been coding in python for quite a while now but I really dont have a clue what is going on with classes. Like why do you NEED to use the dunder methods and how exactly self works. I undertand classes enough to get by using them but I dont understand why I need to do the things I do in classes. \n\nWhat made it so you finally understood what was going on in classes?", "author_fullname": "t2_19ek8vc9xm", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "How did you finally understand classes in python? \ud83e\uddd0", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": true, "name": "t3_1hbvebc", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.15, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733929325.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Ive been coding in python for quite a while now but I really dont have a clue what is going on with classes. Like why do you NEED to use the dunder methods and how exactly self works. I undertand classes enough to get by using them but I dont understand why I need to do the things I do in classes. &lt;/p&gt;\n\n&lt;p&gt;What made it so you finally understood what was going on in classes?&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hbvebc", "is_robot_indexable": true, "report_reasons": null, "author": "Akusoki", "discussion_type": null, "num_comments": 6, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbvebc/how_did_you_finally_understand_classes_in_python/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbvebc/how_did_you_finally_understand_classes_in_python/", "subreddit_subscribers": 1301717, "created_utc": 1733929325.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Manage decision records with mkdocs in a customizable and minimal fashion.\n\nhttps://github.com/timo-reymann/mkdocs-decision-records", "author_fullname": "t2_5ehokhs9", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "decision records with mkdocs made easy", "link_flair_richtext": [{"e": "text", "t": "Resource"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "resource", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hb7qk9", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.81, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Resource", "can_mod_post": false, "score": 3, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733853328.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Manage decision records with mkdocs in a customizable and minimal fashion.&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/timo-reymann/mkdocs-decision-records\"&gt;https://github.com/timo-reymann/mkdocs-decision-records&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?auto=webp&amp;s=0480f293bfd9ba48cffc9006158cd3f95f9cc9c5", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=24e254602ecc4c7a32896726d021ffc263da62a6", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=39747d47be77c5665978eeb1eeeef91eb0af3e94", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=f5b6d43eb30d9b69e18482c3ed5f1db256f214a3", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=a2c08013ae70f86abb37abd91ce34c1d45ec4131", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=4b69af35c8646f0c499c087a50fe4a622258dd9b", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/8Ffhb4itOe7aYEOsleZAWMMNhtXtRNIsaZoh4HAd6JE.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=0ebe79115f2cafa3cf0d9234ba43238821ef5b3f", "width": 1080, "height": 540}], "variants": {}, "id": "I0vttbNhnyZ_CBGsW_Bp52K0nwBl4a8G4Z6y-Ej43Xs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f9716fb2-4113-11ea-a3f1-0ef51f60f757", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ddbd37", "id": "1hb7qk9", "is_robot_indexable": true, "report_reasons": null, "author": "R3ym4nn", "discussion_type": null, "num_comments": 0, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hb7qk9/decision_records_with_mkdocs_made_easy/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hb7qk9/decision_records_with_mkdocs_made_easy/", "subreddit_subscribers": 1301717, "created_utc": 1733853328.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hey,\n\n  \nI'm trying to drive a brushless motor with circuit python on an Adafruit rp2040 feather. I can't seem to find a single libray or tutorial that is not Arduino to be able to drive an ESC Brushless motor", "author_fullname": "t2_s4hrobo3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Brushless Motor with Circuit python and ESC", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbgx14", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.64, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 3, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733877185.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hey,&lt;/p&gt;\n\n&lt;p&gt;I&amp;#39;m trying to drive a brushless motor with circuit python on an Adafruit rp2040 feather. I can&amp;#39;t seem to find a single libray or tutorial that is not Arduino to be able to drive an ESC Brushless motor&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hbgx14", "is_robot_indexable": true, "report_reasons": null, "author": "Boring_Secretary_699", "discussion_type": null, "num_comments": 2, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbgx14/brushless_motor_with_circuit_python_and_esc/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbgx14/brushless_motor_with_circuit_python_and_esc/", "subreddit_subscribers": 1301717, "created_utc": 1733877185.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Why isn't import function working? A quick google says I need to write the shebang which doesn't work either. Pls help.\n\n\\*\\*\\*@\\*\\*\\*\\*\\*\\* \\~ % #!/usr/bin/python\n\nzsh: event not found: /usr/bin/python\n\n\\*\\*\\*@\\*\\*\\*\\*\\*\\* \\~ % import pandas as pd\n\nzsh: command not found: import\n\n\\*\\*\\*@\\*\\*\\*\\*\\*\\*r \\~ %\u00a0\n\n", "author_fullname": "t2_ydlc51ljj", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Starting off in Python", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hbq122", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.25, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733910489.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Why isn&amp;#39;t import function working? A quick google says I need to write the shebang which doesn&amp;#39;t work either. Pls help.&lt;/p&gt;\n\n&lt;p&gt;***@****** ~ % #!/usr/bin/python&lt;/p&gt;\n\n&lt;p&gt;zsh: event not found: /usr/bin/python&lt;/p&gt;\n\n&lt;p&gt;***@****** ~ % import pandas as pd&lt;/p&gt;\n\n&lt;p&gt;zsh: command not found: import&lt;/p&gt;\n\n&lt;p&gt;***@******r ~ %\u00a0&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hbq122", "is_robot_indexable": true, "report_reasons": null, "author": "Independent-Tax3836", "discussion_type": null, "num_comments": 10, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hbq122/starting_off_in_python/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hbq122/starting_off_in_python/", "subreddit_subscribers": 1301717, "created_utc": 1733910489.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hi All \n\nI am researching the DNS protocol in depth (security research) and have written a DNS server in Python that relies on responses from a upstream service (Quad9,for now). Hope you all like it. Do recommend improvements.\n\nLink: [https://xer0x.in/dns-server-in-python/](https://xer0x.in/dns-server-in-python/)\n\nPS: I am aware of the Blocklist parsing inconsistency bug.", "author_fullname": "t2_73vebkps", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "DNS server written in Python", "link_flair_richtext": [{"e": "text", "t": "Tutorial"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "tutorial", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hagkql", "quarantine": false, "link_flair_text_color": "dark", "upvote_ratio": 0.98, "author_flair_background_color": null, "subreddit_type": "public", "ups": 125, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Tutorial", "can_mod_post": false, "score": 125, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733768919.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hi All &lt;/p&gt;\n\n&lt;p&gt;I am researching the DNS protocol in depth (security research) and have written a DNS server in Python that relies on responses from a upstream service (Quad9,for now). Hope you all like it. Do recommend improvements.&lt;/p&gt;\n\n&lt;p&gt;Link: &lt;a href=\"https://xer0x.in/dns-server-in-python/\"&gt;https://xer0x.in/dns-server-in-python/&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;PS: I am aware of the Blocklist parsing inconsistency bug.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?auto=webp&amp;s=a8a9aa8527d7798c325d2fbc217e20660bbb8e77", "width": 1200, "height": 808}, "resolutions": [{"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=4877171e4c2900af97bc546d5e064e780d54bd60", "width": 108, "height": 72}, {"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=237181522baaa2dc2681620c7246df283eb6c8c8", "width": 216, "height": 145}, {"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6d1eceac626d5bd1c2e986904b7aad7900cff482", "width": 320, "height": 215}, {"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=8c07b0184adb98e1416fadb2bdf94f20661dbe28", "width": 640, "height": 430}, {"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=440c76af6210b19856a78bd8feb6baccf601325d", "width": 960, "height": 646}, {"url": "https://external-preview.redd.it/gq94kFvjdIekR60RYg8oKI6RCItiVKr-yW4CqA7XRqQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=f72f9bf22f70fea49adc5d948aa49d5833941be3", "width": 1080, "height": 727}], "variants": {}, "id": "is-Yh57QDSnty3CRYIEXlHQUQyRBqu6srkoQXRrQwZo"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "7987a74c-04d8-11eb-84ca-0e0ac8b5a78f", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#dadada", "id": "1hagkql", "is_robot_indexable": true, "report_reasons": null, "author": "Bulky_Pomegranate_53", "discussion_type": null, "num_comments": 15, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hagkql/dns_server_written_in_python/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hagkql/dns_server_written_in_python/", "subreddit_subscribers": 1301717, "created_utc": 1733768919.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "**What My Project Does**\n\n[tui-network](https://github.com/Zatfer17/tui-network) is a Python based TUI for the wifi on Linux built with\u00a0[Textual](https://github.com/Textualize/textual). And you can read\u00a0[classic fortune quotes](https://wiki.debian.org/fortune)\u00a0on the side, while waiting for the list of networks to refresh.  \n  \n**Target Audience**\n\nLinux users without DEs (typically tiling wm users with no gnome/xfce settings manager)  \n  \n**Comparison**\n\nPrettier than nmtui, similar to [impala](https://github.com/pythops/impala) but Python based", "author_fullname": "t2_b8d7zm2v", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "tui-network: another TUI for the wifi on Linux", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1haxvtn", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.59, "author_flair_background_color": null, "subreddit_type": "public", "ups": 3, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 3, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733822136.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;What My Project Does&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;a href=\"https://github.com/Zatfer17/tui-network\"&gt;tui-network&lt;/a&gt; is a Python based TUI for the wifi on Linux built with\u00a0&lt;a href=\"https://github.com/Textualize/textual\"&gt;Textual&lt;/a&gt;. And you can read\u00a0&lt;a href=\"https://wiki.debian.org/fortune\"&gt;classic fortune quotes&lt;/a&gt;\u00a0on the side, while waiting for the list of networks to refresh.  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Target Audience&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Linux users without DEs (typically tiling wm users with no gnome/xfce settings manager)  &lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Comparison&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Prettier than nmtui, similar to &lt;a href=\"https://github.com/pythops/impala\"&gt;impala&lt;/a&gt; but Python based&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?auto=webp&amp;s=e5f3037e17b294d6d45ad8d1e808d4d924799b52", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=0ae21884034562ddeeeef47f5851a4a18e0f8d62", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1b6768f48affe8a42e542e1be3b9630f4418d4b6", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=91c01c1b6f7018ca854c8962fd69f68ea93059ed", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=16e82509faba47ec99b26a7b255f447c23ece30d", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=6d97356ed021fd1700423864f1d3d2763588c6a6", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/lRlbqtCh0-okziK4nxdjH2yfT4thUJYSwiVuGOHqZCU.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=7317df0f3bf0b55eb107271be75c63082be5a1fa", "width": 1080, "height": 540}], "variants": {}, "id": "3VSJcsrWYOD7C_uYoxvMfjpHbp0Iyv5kXQS97UEF9HI"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1haxvtn", "is_robot_indexable": true, "report_reasons": null, "author": "zatfer", "discussion_type": null, "num_comments": 0, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1haxvtn/tuinetwork_another_tui_for_the_wifi_on_linux/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1haxvtn/tuinetwork_another_tui_for_the_wifi_on_linux/", "subreddit_subscribers": 1301717, "created_utc": 1733822136.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "# Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d\n\nDive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.\n\n## How it Works:\n\n1. **Ask Away**: Post your advanced Python questions here.\n2. **Expert Insights**: Get answers from experienced developers.\n3. **Resource Pool**: Share or discover tutorials, articles, and tips.\n\n## Guidelines:\n\n* This thread is for **advanced questions only**. Beginner questions are welcome in our [Daily Beginner Thread](#daily-beginner-thread-link) every Thursday.\n* Questions that are not advanced may be removed and redirected to the appropriate thread.\n\n## Recommended Resources:\n\n* If you don't receive a response, consider exploring r/LearnPython or join the [Python Discord Server](https://discord.gg/python) for quicker assistance.\n\n## Example Questions:\n\n1. **How can you implement a custom memory allocator in Python?**\n2. **What are the best practices for optimizing Cython code for heavy numerical computations?**\n3. **How do you set up a multi-threaded architecture using Python's Global Interpreter Lock (GIL)?**\n4. **Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?**\n5. **How would you go about implementing a distributed task queue using Celery and RabbitMQ?**\n6. **What are some advanced use-cases for Python's decorators?**\n7. **How can you achieve real-time data streaming in Python with WebSockets?**\n8. **What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?**\n9. **Best practices for securing a Flask (or similar) REST API with OAuth 2.0?**\n10. **What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)**\n\nLet's deepen our Python knowledge together. Happy coding! \ud83c\udf1f", "author_fullname": "t2_6l4z3", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Tuesday Daily Thread: Advanced questions", "link_flair_richtext": [{"a": ":pythonLogo:", "e": "emoji", "u": "https://emoji.redditmedia.com/8yxdpg6xxnr71_t5_2qh0y/pythonLogo"}, {"e": "text", "t": " Daily Thread"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "daily-thread", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1haod3g", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 1.0, "author_flair_background_color": null, "subreddit_type": "public", "ups": 4, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": ":pythonLogo: Daily Thread", "can_mod_post": false, "score": 4, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": true, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733788808.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;Weekly Wednesday Thread: Advanced Questions \ud83d\udc0d&lt;/h1&gt;\n\n&lt;p&gt;Dive deep into Python with our Advanced Questions thread! This space is reserved for questions about more advanced Python topics, frameworks, and best practices.&lt;/p&gt;\n\n&lt;h2&gt;How it Works:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;Ask Away&lt;/strong&gt;: Post your advanced Python questions here.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Expert Insights&lt;/strong&gt;: Get answers from experienced developers.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Resource Pool&lt;/strong&gt;: Share or discover tutorials, articles, and tips.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h2&gt;Guidelines:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;This thread is for &lt;strong&gt;advanced questions only&lt;/strong&gt;. Beginner questions are welcome in our &lt;a href=\"#daily-beginner-thread-link\"&gt;Daily Beginner Thread&lt;/a&gt; every Thursday.&lt;/li&gt;\n&lt;li&gt;Questions that are not advanced may be removed and redirected to the appropriate thread.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Recommended Resources:&lt;/h2&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you don&amp;#39;t receive a response, consider exploring &lt;a href=\"/r/LearnPython\"&gt;r/LearnPython&lt;/a&gt; or join the &lt;a href=\"https://discord.gg/python\"&gt;Python Discord Server&lt;/a&gt; for quicker assistance.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h2&gt;Example Questions:&lt;/h2&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;How can you implement a custom memory allocator in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for optimizing Cython code for heavy numerical computations?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How do you set up a multi-threaded architecture using Python&amp;#39;s Global Interpreter Lock (GIL)?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Can you explain the intricacies of metaclasses and how they influence object-oriented design in Python?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How would you go about implementing a distributed task queue using Celery and RabbitMQ?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are some advanced use-cases for Python&amp;#39;s decorators?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;How can you achieve real-time data streaming in Python with WebSockets?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the performance implications of using native Python data structures vs NumPy arrays for large-scale data?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Best practices for securing a Flask (or similar) REST API with OAuth 2.0?&lt;/strong&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;What are the best practices for using Python in a microservices architecture? (..and more generally, should I even use microservices?)&lt;/strong&gt;&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;p&gt;Let&amp;#39;s deepen our Python knowledge together. Happy coding! \ud83c\udf1f&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?auto=webp&amp;s=77877e508cacc3a5c51009b26cc51fd08031ca76", "width": 512, "height": 288}, "resolutions": [{"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=c5fbdf8efb5e6f14fe03845466b74ba9ebab4413", "width": 108, "height": 60}, {"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=d57848912389eb70e32659895710a7c322a93edf", "width": 216, "height": 121}, {"url": "https://external-preview.redd.it/IM0hooelH8W7dKT66ZTTI9zlcI3JEGy5AhOfU9_4tm4.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=86d869d6c6e16a13c5cf960ab69d7d274b49ff16", "width": 320, "height": 180}], "variants": {}, "id": "aNa9dCzuqtUFBkZTt98jjYpcv1i_lqriq_lbtm_LcRo"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "6c024934-de3f-11ea-a05a-0ea86b2be9a1", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": "moderator", "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#00a6a5", "id": "1haod3g", "is_robot_indexable": true, "report_reasons": null, "author": "AutoModerator", "discussion_type": null, "num_comments": 0, "send_replies": false, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1haod3g/tuesday_daily_thread_advanced_questions/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1haod3g/tuesday_daily_thread_advanced_questions/", "subreddit_subscribers": 1301717, "created_utc": 1733788808.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "I\u2019ve been working as a JS web developer for over 8 years now, but I\u2019ve found myself losing interest in it. I\u2019m really looking to make a switch to something new, and I\u2019ve been getting advice to get into Python and move into that field. However, I\u2019m not entirely sure what the career opportunities in Python are like, or how I can best break into it.\n\nHas anyone else made a similar transition? I\u2019d love to hear about your experiences and any advice you have on how to make this switch successfully. Specifically, I\u2019m curious about:\n\nThe job market for Python developers\nThe skills and projects I should focus on to get noticed. How much time would it take.\nAny roadmaps or resources you\u2019d recommend.\n\nThank you in advance!", "author_fullname": "t2_vfretuy5", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Looking to Transition from Web Development to Python \u2013 Seeking Tips and Insights", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hagupi", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.66, "author_flair_background_color": null, "subreddit_type": "public", "ups": 9, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 9, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733769587.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;I\u2019ve been working as a JS web developer for over 8 years now, but I\u2019ve found myself losing interest in it. I\u2019m really looking to make a switch to something new, and I\u2019ve been getting advice to get into Python and move into that field. However, I\u2019m not entirely sure what the career opportunities in Python are like, or how I can best break into it.&lt;/p&gt;\n\n&lt;p&gt;Has anyone else made a similar transition? I\u2019d love to hear about your experiences and any advice you have on how to make this switch successfully. Specifically, I\u2019m curious about:&lt;/p&gt;\n\n&lt;p&gt;The job market for Python developers\nThe skills and projects I should focus on to get noticed. How much time would it take.\nAny roadmaps or resources you\u2019d recommend.&lt;/p&gt;\n\n&lt;p&gt;Thank you in advance!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hagupi", "is_robot_indexable": true, "report_reasons": null, "author": "Western-Lack8015", "discussion_type": null, "num_comments": 13, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hagupi/looking_to_transition_from_web_development_to/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hagupi/looking_to_transition_from_web_development_to/", "subreddit_subscribers": 1301717, "created_utc": 1733769587.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Target Audience: People who like messing with their devices, people who want to know about their phones\n\nComparison: Not any python based that I'm aware of, but in general the closest match is \"Device info HW\". in comparison my application is: open-source, gives some information which device info doesn't, is easier to read and has a better ui (in my opinion as I don't like the other's look)\n\ninformation on the app: It is a .py file that will eventually become an apk and is fully based on Python, including the ui that is made in kivy. It is currently on v0.7 and has support for most samsung devices (support for other vendors needs testers from other Android manufacturers if your interested). To get its information it uses the subprocess module.\n\nthanks for reading this! here's the github: https://github.com/FastCocobo/AndroidFetch\n\nThanks for everyone's input! I have imported the github page and have taken the advice to watch some tutorials on git", "author_fullname": "t2_b1qdiz6w", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "New android app project called AndroidFetch", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hahglk", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.61, "author_flair_background_color": "transparent", "subreddit_type": "public", "ups": 5, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": "fa1eebc8-537b-11ee-bc7a-e60c595033c2", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 5, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": 1733784937.0, "author_flair_css_class": null, "author_flair_richtext": [{"e": "text", "t": "It works on my machine"}], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733771055.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "richtext", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Target Audience: People who like messing with their devices, people who want to know about their phones&lt;/p&gt;\n\n&lt;p&gt;Comparison: Not any python based that I&amp;#39;m aware of, but in general the closest match is &amp;quot;Device info HW&amp;quot;. in comparison my application is: open-source, gives some information which device info doesn&amp;#39;t, is easier to read and has a better ui (in my opinion as I don&amp;#39;t like the other&amp;#39;s look)&lt;/p&gt;\n\n&lt;p&gt;information on the app: It is a .py file that will eventually become an apk and is fully based on Python, including the ui that is made in kivy. It is currently on v0.7 and has support for most samsung devices (support for other vendors needs testers from other Android manufacturers if your interested). To get its information it uses the subprocess module.&lt;/p&gt;\n\n&lt;p&gt;thanks for reading this! here&amp;#39;s the github: &lt;a href=\"https://github.com/FastCocobo/AndroidFetch\"&gt;https://github.com/FastCocobo/AndroidFetch&lt;/a&gt;&lt;/p&gt;\n\n&lt;p&gt;Thanks for everyone&amp;#39;s input! I have imported the github page and have taken the advice to watch some tutorials on git&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?auto=webp&amp;s=493d153154c1dbe5125cf7e2d0c963e2e12ec969", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=e8b276be0d0f7561ee0dff7485f5c51a1e1d21a0", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=30f9f4d96d2ed380b170c8e2bd63ce72cb01e81e", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8e7081841f885216e15c2bd577e8e047a1df5acb", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=155d21dfb787995a404fc5f46e1062d2dcc5fc42", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=579e8fa6621a56cbfe0890ee65cf27f80438a373", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/6zAzXS4z8_Cj4k6v9iKzaVx-JkgtwwkIYAisbNk_5Fw.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=4de1d133a8abcfa9da172c9d63b87cff5aee59fc", "width": 1080, "height": 540}], "variants": {}, "id": "bMCT8caHtJ_bV64ahrhtMCEOgmkgQdwrSVCs5e-kYmU"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "It works on my machine", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1hahglk", "is_robot_indexable": true, "report_reasons": null, "author": "QueasyWrangler4171", "discussion_type": null, "num_comments": 8, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/Python/comments/1hahglk/new_android_app_project_called_androidfetch/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hahglk/new_android_app_project_called_androidfetch/", "subreddit_subscribers": 1301717, "created_utc": 1733771055.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "# [BOOP (Book Of Organized Puzzles)](https://github.com/Muneer320/BOOP)\n\n# Description\n\nBOOP is a Python-based automation project that generates a fully personalized puzzle book. With just a list of words as input, it creates a complete PDF with title pages, index pages, word search puzzles, and solutions.\n\nWhy did I make this? Honestly:\n\n1. I was bored and needed something fun to work on.\n2. I already had a script that could make word search puzzles, so I thought, \"Why not take it up a notch?\"\n3. I\u2019ve always wanted to write a book but lack the intellectual supremacy to do so. This project seemed like the next best thing!\n\n# Links\n\n* [Sample PDF Output](https://drive.google.com/file/d/1KkbCUuIuO8hmeHavUyO8e90r4qIQCxPc)\n* [GitHub Repository](https://github.com/Muneer320/BOOP)\n\n# What My Project Does\n\n* **Word Search Puzzles**: Generates 17 puzzles per topic, categorized into Normal, Hard, and Bonus modes.\n   * Normal: 10 puzzles (13x13 grid).\n   * Hard: 5 puzzles (17x17 grid).\n   * Bonus: 2 challenging puzzles.\n* **Fully Designed Book**: Includes title pages, a detailed index, puzzle pages, and solution pages.\n* **Automation**: Users only need to input a list of 200 words per topic; the script handles everything else.\n\n# Target Audience\n\n* Puzzle enthusiasts looking for custom-made puzzle books.\n* Educators creating engaging learning materials.\n* Developers interested in Python-based automation projects.\n\n# Comparison to Other Tools\n\nUnlike existing puzzle generation tools that often require manual input and separate design efforts, BOOP automates the entire process\u2014from generating puzzles to compiling them into a polished, ready-to-print PDF. It\u2019s an all-in-one solution for creating professional-quality puzzle books.\n\n# Extra Details\n\nBOOP started as just another random project, but it taught me a lot along the way. I learned about handling PDFs in Python, the importance of using different file formats for various tasks, and discovered many dos and don'ts that only hands-on experience can teach. It\u2019s been an incredibly fun and rewarding journey!\n\n# Conclusion\n\nBOOP makes puzzle book creation easy, fun, and entirely automated. Whether you\u2019re an educator, puzzle fan, or a developer looking to explore automation, this project has something for you. Check it out on GitHub and let me know your thoughts!", "author_fullname": "t2_an6k5ufa", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Create a complete WORD SEARCH BOOK with a single click.", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1ha82ex", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.8, "author_flair_background_color": "transparent", "subreddit_type": "public", "ups": 25, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": "0aebec76-537c-11ee-b85b-eafe928e0250", "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 25, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [{"e": "text", "t": "Ignoring PEP 8"}], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733745333.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "richtext", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;h1&gt;&lt;a href=\"https://github.com/Muneer320/BOOP\"&gt;BOOP (Book Of Organized Puzzles)&lt;/a&gt;&lt;/h1&gt;\n\n&lt;h1&gt;Description&lt;/h1&gt;\n\n&lt;p&gt;BOOP is a Python-based automation project that generates a fully personalized puzzle book. With just a list of words as input, it creates a complete PDF with title pages, index pages, word search puzzles, and solutions.&lt;/p&gt;\n\n&lt;p&gt;Why did I make this? Honestly:&lt;/p&gt;\n\n&lt;ol&gt;\n&lt;li&gt;I was bored and needed something fun to work on.&lt;/li&gt;\n&lt;li&gt;I already had a script that could make word search puzzles, so I thought, &amp;quot;Why not take it up a notch?&amp;quot;&lt;/li&gt;\n&lt;li&gt;I\u2019ve always wanted to write a book but lack the intellectual supremacy to do so. This project seemed like the next best thing!&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Links&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;a href=\"https://drive.google.com/file/d/1KkbCUuIuO8hmeHavUyO8e90r4qIQCxPc\"&gt;Sample PDF Output&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;a href=\"https://github.com/Muneer320/BOOP\"&gt;GitHub Repository&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;Word Search Puzzles&lt;/strong&gt;: Generates 17 puzzles per topic, categorized into Normal, Hard, and Bonus modes.\n\n&lt;ul&gt;\n&lt;li&gt;Normal: 10 puzzles (13x13 grid).&lt;/li&gt;\n&lt;li&gt;Hard: 5 puzzles (17x17 grid).&lt;/li&gt;\n&lt;li&gt;Bonus: 2 challenging puzzles.&lt;/li&gt;\n&lt;/ul&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Fully Designed Book&lt;/strong&gt;: Includes title pages, a detailed index, puzzle pages, and solution pages.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Automation&lt;/strong&gt;: Users only need to input a list of 200 words per topic; the script handles everything else.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Puzzle enthusiasts looking for custom-made puzzle books.&lt;/li&gt;\n&lt;li&gt;Educators creating engaging learning materials.&lt;/li&gt;\n&lt;li&gt;Developers interested in Python-based automation projects.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Comparison to Other Tools&lt;/h1&gt;\n\n&lt;p&gt;Unlike existing puzzle generation tools that often require manual input and separate design efforts, BOOP automates the entire process\u2014from generating puzzles to compiling them into a polished, ready-to-print PDF. It\u2019s an all-in-one solution for creating professional-quality puzzle books.&lt;/p&gt;\n\n&lt;h1&gt;Extra Details&lt;/h1&gt;\n\n&lt;p&gt;BOOP started as just another random project, but it taught me a lot along the way. I learned about handling PDFs in Python, the importance of using different file formats for various tasks, and discovered many dos and don&amp;#39;ts that only hands-on experience can teach. It\u2019s been an incredibly fun and rewarding journey!&lt;/p&gt;\n\n&lt;h1&gt;Conclusion&lt;/h1&gt;\n\n&lt;p&gt;BOOP makes puzzle book creation easy, fun, and entirely automated. Whether you\u2019re an educator, puzzle fan, or a developer looking to explore automation, this project has something for you. Check it out on GitHub and let me know your thoughts!&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?auto=webp&amp;s=172291028345ac7cf96b3f3c8ea95cfaa3cf94cd", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=551a039fc4d05edc6f3d2e134de828db182da0ab", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=9d91c0b272d30ed529d9ed7d81c82e4be80a6d6b", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=8cad79daad361a6ec33df97878fc63039380fdcf", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=0f8386b83d4e931b1b01b87dd64b1c338c76eb12", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=d2f0e2715ee77118a12c70d7ee5fb7384e056e4a", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/EFFrMrtbJ0lmM9ho68tVq_hE2w7qF_SMdzXkS7p35ho.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=10f3a36e1cc2a3887d4544cffe7b339aa096d845", "width": 1080, "height": 540}], "variants": {}, "id": "nuE0IVK9Vka9rpFBrWSGBhQE2cECUlgfPb4LNBTWz4E"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": "Ignoring PEP 8", "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1ha82ex", "is_robot_indexable": true, "report_reasons": null, "author": "Either-Let-331", "discussion_type": null, "num_comments": 14, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": "dark", "permalink": "/r/Python/comments/1ha82ex/create_a_complete_word_search_book_with_a_single/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1ha82ex/create_a_complete_word_search_book_with_a_single/", "subreddit_subscribers": 1301717, "created_utc": 1733745333.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hello, I\u2019ve created a project and would appreciate your assistance in checking if it\u2019s correct or if any changes are needed. It involves time series analysis on specific data (which I\u2019ll share in DM), along with a link to the HTML file.", "author_fullname": "t2_14onik1r8g", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Need assistance for reviewing a python project! ASAP.", "link_flair_richtext": [{"e": "text", "t": "Discussion"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "discussion", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hb6udr", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.14, "author_flair_background_color": null, "subreddit_type": "public", "ups": 0, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Discussion", "can_mod_post": false, "score": 0, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733851067.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello, I\u2019ve created a project and would appreciate your assistance in checking if it\u2019s correct or if any changes are needed. It involves time series analysis on specific data (which I\u2019ll share in DM), along with a link to the HTML file.&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": true, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "0df42996-1c5e-11ea-b1a0-0e44e1c5b731", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#f50057", "id": "1hb6udr", "is_robot_indexable": true, "report_reasons": null, "author": "_undefine", "discussion_type": null, "num_comments": 7, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hb6udr/need_assistance_for_reviewing_a_python_project/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hb6udr/need_assistance_for_reviewing_a_python_project/", "subreddit_subscribers": 1301717, "created_utc": 1733851067.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "\ud83d\udd17 Link \u2014 [https://github.com/axorax/tkforge](https://github.com/axorax/tkforge)\n\n# What My Project Does\n\nTkForge is a Python app that allows you to turn your Figma design into Python tkinter code. So, you can make a GUI design in Figma and use specific names like \"textbox\", \"circle\", \"image\" and more for interactable elements then use TkForge to get the code for a fully functional working GUI app from your design.\n\nAnd it's **free, open-source** and regularly maintained!\n\n# Target Audience\n\nTkForge is made for anyone who wants to make a GUI with Python easily and efficiently. It's fast and you can make some really complex and beautiful GUI's with it.\n\n# Comparison\n\nThere's another project similar to TkForge called Tkinter Designer. Personally without being biased, I think TkForge is better. TkForge supports everything Tkinter Designer does and more. TkForge generates better code, supports more elements, allows you to add placeholder text (which you can't by default in tkinter), automatically sets foreground color and a lot more! Placeholder text and foreground color generation is a bit buggy though.  I use TkForge for most of my tkinter projects. You can get help in the Discord server.\n\n# Updates\n\nI updated the app to support multiple frames, fixed a lot of previous bugs and added checks for new updates!\n\nThanks for reading! \ud83d\ude04", "author_fullname": "t2_glnvgt7o", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Convert Figma design into Python code", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1ha47wt", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 52, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 52, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733728206.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;\ud83d\udd17 Link \u2014 &lt;a href=\"https://github.com/axorax/tkforge\"&gt;https://github.com/axorax/tkforge&lt;/a&gt;&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;TkForge is a Python app that allows you to turn your Figma design into Python tkinter code. So, you can make a GUI design in Figma and use specific names like &amp;quot;textbox&amp;quot;, &amp;quot;circle&amp;quot;, &amp;quot;image&amp;quot; and more for interactable elements then use TkForge to get the code for a fully functional working GUI app from your design.&lt;/p&gt;\n\n&lt;p&gt;And it&amp;#39;s &lt;strong&gt;free, open-source&lt;/strong&gt; and regularly maintained!&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;TkForge is made for anyone who wants to make a GUI with Python easily and efficiently. It&amp;#39;s fast and you can make some really complex and beautiful GUI&amp;#39;s with it.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;There&amp;#39;s another project similar to TkForge called Tkinter Designer. Personally without being biased, I think TkForge is better. TkForge supports everything Tkinter Designer does and more. TkForge generates better code, supports more elements, allows you to add placeholder text (which you can&amp;#39;t by default in tkinter), automatically sets foreground color and a lot more! Placeholder text and foreground color generation is a bit buggy though.  I use TkForge for most of my tkinter projects. You can get help in the Discord server.&lt;/p&gt;\n\n&lt;h1&gt;Updates&lt;/h1&gt;\n\n&lt;p&gt;I updated the app to support multiple frames, fixed a lot of previous bugs and added checks for new updates!&lt;/p&gt;\n\n&lt;p&gt;Thanks for reading! \ud83d\ude04&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?auto=webp&amp;s=bf1fdb887ef82cb52c64e972006a7265bdfb5d44", "width": 1280, "height": 640}, "resolutions": [{"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=734722b2b3f058b44d8102d7bbf99e48be1e4d25", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=5a4bf5a93eef886bd670d5020b799b1d6be1f61d", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=36616b3bee37d215c7940cdb43671e45c8b0848e", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=e5af5cf499684baaad5bef8bf91a006aa065182f", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=14d3ea64752e4e722ec50e845a44d43f0a85fe89", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/cDplXJ_EDZSl5CkyYxMKf9wuFfQl5YeK93VnzecL2Bk.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=02747dbad9f92024b73792b601b40319f79c131f", "width": 1080, "height": 540}], "variants": {}, "id": "fSRJpJOPoY2zVHuj8mHT7vWDpXPyIW4UCmFbCLJ1QYA"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1ha47wt", "is_robot_indexable": true, "report_reasons": null, "author": "axorax", "discussion_type": null, "num_comments": 11, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1ha47wt/convert_figma_design_into_python_code/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1ha47wt/convert_figma_design_into_python_code/", "subreddit_subscribers": 1301717, "created_utc": 1733728206.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "hello, i recently wanted to start learning pythone when i stumbled across Turtle, and ive seen a tic tac toe in the python terminal before and i thougt, it would look so much better by drawing it. so i did, its 340 lines of code that could be improved so please correct me since this is my first time and i am trying to learn, and maybe tell me what you think of it, thx.\n\nWhat my project does: this is a toy project\n\nTarget audience: made for people who want to play tic tac toe in python\n\nComparison: its different from other project because they type the field in their terminals, but this paints it in a seperate window.\n\nside note: (the giant circle it makes at the end is so the turtle windows doesnt close)\n\nheres the link:\u00a0[https://github.com/codefish-py/Python-Turtle-Tic-Tac-Toe/blob/main/Tic%20Tac%20Toe.py](https://github.com/codefish-py/Python-Turtle-Tic-Tac-Toe/blob/main/Tic%20Tac%20Toe.py)", "author_fullname": "t2_1chkpmn95s", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "My first decent Python project: Tic Tac Toe using Turtle", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1hajhin", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.54, "author_flair_background_color": null, "subreddit_type": "public", "ups": 2, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 2, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733776077.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;hello, i recently wanted to start learning pythone when i stumbled across Turtle, and ive seen a tic tac toe in the python terminal before and i thougt, it would look so much better by drawing it. so i did, its 340 lines of code that could be improved so please correct me since this is my first time and i am trying to learn, and maybe tell me what you think of it, thx.&lt;/p&gt;\n\n&lt;p&gt;What my project does: this is a toy project&lt;/p&gt;\n\n&lt;p&gt;Target audience: made for people who want to play tic tac toe in python&lt;/p&gt;\n\n&lt;p&gt;Comparison: its different from other project because they type the field in their terminals, but this paints it in a seperate window.&lt;/p&gt;\n\n&lt;p&gt;side note: (the giant circle it makes at the end is so the turtle windows doesnt close)&lt;/p&gt;\n\n&lt;p&gt;heres the link:\u00a0&lt;a href=\"https://github.com/codefish-py/Python-Turtle-Tic-Tac-Toe/blob/main/Tic%20Tac%20Toe.py\"&gt;https://github.com/codefish-py/Python-Turtle-Tic-Tac-Toe/blob/main/Tic%20Tac%20Toe.py&lt;/a&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?auto=webp&amp;s=1e652ee5cb62c290244fce72a22791f31dcd3dbf", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=00dff38316e3fed908f03aca6641f36783e9c7e0", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=467296ab60fbd48b145f98891d5d008c2d374a3d", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=4105fae0e19a8810297953c43a74a39320dd9dd2", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=10b8b6e72050c84b686c987fff74cfc2f05e26a7", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=32030dc88b1144fc52897adb5ed7d36192c9b5b1", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/OBPpPZmvd1DeVmHNHsJostW3hYsh5nLRYkrhDIfLcXQ.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=1c6ed9142cf1fa77518a08ddcceb0eb5025aece5", "width": 1080, "height": 540}], "variants": {}, "id": "q6Ncxajzx4qMxVuR9J6buP7SPXhmOi_7wcJA_LMidOs"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1hajhin", "is_robot_indexable": true, "report_reasons": null, "author": "Gullible_Spirit1450", "discussion_type": null, "num_comments": 7, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1hajhin/my_first_decent_python_project_tic_tac_toe_using/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1hajhin/my_first_decent_python_project_tic_tac_toe_using/", "subreddit_subscribers": 1301717, "created_utc": 1733776077.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "**Hello everyone,**\n\nEven with the intention of sharing, it's always a bit stressful to expose personal work to the community =}\n\nBut well... Maybe someone has the same question or need as I did, so with that in mind, I'm sharing my modest work done during my free time in the evenings (when the whole family is asleep =D) As you can see, besides the templates, there isn't anything particularly special \u2013 PyKick does what it needs to do and voil\u00e0 \u2013 unit tests were the most time-consuming, as always (the PowerShell module was quick to write).\n\n# What My Project Does\n\nPyKick is an installable PowerShell module (or can be sourced otherwise) that quickly generates a new Python project with Git management, a virtual environment, and Sphinx documentation (if requested). In my Python projects, I need CLI exposure. Therefore, the generated Python project is immediately functional (a `pip install .` results in a CLI providing package information and version - the structure is here, just to complete)\n\nPyKick doesn't aim to replace anything. Not finding something that met my needs, I ended up writing it without realizing it =}\n\n# Target Audience\n\nI think it's quite clear =\u00fe\n\n* If you are a developer or need a Python project generator with Git version control, isolated virtual environment, and documentation, etc.\n* Especially if you work with PowerShell\n\nPyKick can assist you.\n\n# Comparison\n\nI don't think comparison is relevant as the goal and environment are not identical... If a comparison is necessary, then PyKick is a Python project generator that works on PowerShell.\n\n# GitHub Repo: [https://github.com/KaminoU/pykick](https://github.com/KaminoU/pykick)\n\nThank you for any feedback you might have.\n\nCheers", "author_fullname": "t2_15w4ub", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Introducing PyKick: A Python Project Generator for PowerShell", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1ha65l9", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.69, "author_flair_background_color": null, "subreddit_type": "public", "ups": 7, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 7, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "content_categories": null, "is_self": true, "mod_note": null, "created": 1733737039.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;&lt;strong&gt;Hello everyone,&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;Even with the intention of sharing, it&amp;#39;s always a bit stressful to expose personal work to the community =}&lt;/p&gt;\n\n&lt;p&gt;But well... Maybe someone has the same question or need as I did, so with that in mind, I&amp;#39;m sharing my modest work done during my free time in the evenings (when the whole family is asleep =D) As you can see, besides the templates, there isn&amp;#39;t anything particularly special \u2013 PyKick does what it needs to do and voil\u00e0 \u2013 unit tests were the most time-consuming, as always (the PowerShell module was quick to write).&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;PyKick is an installable PowerShell module (or can be sourced otherwise) that quickly generates a new Python project with Git management, a virtual environment, and Sphinx documentation (if requested). In my Python projects, I need CLI exposure. Therefore, the generated Python project is immediately functional (a &lt;code&gt;pip install .&lt;/code&gt; results in a CLI providing package information and version - the structure is here, just to complete)&lt;/p&gt;\n\n&lt;p&gt;PyKick doesn&amp;#39;t aim to replace anything. Not finding something that met my needs, I ended up writing it without realizing it =}&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;I think it&amp;#39;s quite clear =\u00fe&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;If you are a developer or need a Python project generator with Git version control, isolated virtual environment, and documentation, etc.&lt;/li&gt;\n&lt;li&gt;Especially if you work with PowerShell&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;PyKick can assist you.&lt;/p&gt;\n\n&lt;h1&gt;Comparison&lt;/h1&gt;\n\n&lt;p&gt;I don&amp;#39;t think comparison is relevant as the goal and environment are not identical... If a comparison is necessary, then PyKick is a Python project generator that works on PowerShell.&lt;/p&gt;\n\n&lt;h1&gt;GitHub Repo: &lt;a href=\"https://github.com/KaminoU/pykick\"&gt;https://github.com/KaminoU/pykick&lt;/a&gt;&lt;/h1&gt;\n\n&lt;p&gt;Thank you for any feedback you might have.&lt;/p&gt;\n\n&lt;p&gt;Cheers&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1ha65l9", "is_robot_indexable": true, "report_reasons": null, "author": "K4minoU", "discussion_type": null, "num_comments": 0, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1ha65l9/introducing_pykick_a_python_project_generator_for/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1ha65l9/introducing_pykick_a_python_project_generator_for/", "subreddit_subscribers": 1301717, "created_utc": 1733737039.0, "num_crossposts": 0, "media": null, "is_video": false}}, {"kind": "t3", "data": {"approved_at_utc": null, "subreddit": "Python", "selftext": "Hello everyone,\n\nIt's Archil again, checking in from Wroc\u0142aw, Poland. I'm excited to announce the release of Deply 0.5.1, an updated version of my Python tool for enforcing architectural patterns and dependencies in larger codebases. I've noticed steady downloads since the previous post, and I'm genuinely grateful to everyone who has tried Deply or provided feedback.\n\n# What My Project Does\n\nFor those new here [here is my previous post](https://www.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/), Deply analyzes your code structure and verifies that your Python project adheres to a defined architecture. You specify layers, set rules, and Deply enforces them\u2014helping maintain clean, modular, and maintainable code as your project grows.\n\n# Target Audience\n\nIdeal for developers and teams building medium to large Python applications who need to maintain clear, enforceable architectural boundaries. It also suits those aiming to teach or learn best practices.\n\n# Comparison to Other Tools\n\n\u2022 **pydeps:**\n\n*Focus:* Visualization of dependencies\n\n*Comparison:* pydeps provides a visual map of imports, helping you understand how parts of your code relate. Deply goes further by actively enforcing rules on these dependencies, ensuring that your project structure adheres to architectural guidelines instead of merely displaying it.\n\n\u2022 **import-linter:**\n\n*Focus:* Import-based dependency constraints\n\n*Comparison:* import-linter is excellent for managing import hierarchies and preventing forbidden dependencies. Deply builds on this approach by supporting additional collectors (class inheritance, decorators, file patterns) and more complex rules, making it easier to define rich architectural standards beyond imports.\n\n\u2022 **pytest-archon:**\n\n*Focus:* Architectural checks integrated into pytest\n\n*Comparison:* pytest-archon provides Pythonic tests for architectural constraints. While it\u2019s great for projects already using pytest, Deply is a standalone tool that can integrate with any CI pipeline or workflow. Deply\u2019s configuration-driven approach and broader set of collectors and rules allow for more flexible and layered architecture definitions.\n\n\u2022 **pytestarch:**\n\n*Focus:* ArchUnit-inspired checks for Python using pytest\n\n*Comparison:* pytestarch mimics the style of Java\u2019s ArchUnit, letting you write tests for architectural constraints. Deply\u2019s YAML configuration and layer-based modeling approach differ by providing a domain-specific language for architecture, reducing the need to write code-based tests and offering more straightforward integration for non-test environments.\n\n\u2022 **Tach (Rust-based):**\n\n*Focus:* Architecture checks written in Rust\n\n*Comparison:* Tach brings a Rust-based perspective on architecture enforcement. Deply, being Python-native, integrates more seamlessly into Python ecosystems. Deply also provides Python-specific collectors and is tailored for Python\u2019s dynamic nature, whereas Tach, being language-agnostic and built in Rust, may require additional steps or adaptations for Python-specific patterns.\n\n\u2022 **ArchUnit (Java-focused):**\n\n*Focus:* Architecture rules for Java codebases\n\n*Comparison:* ArchUnit excels at defining and enforcing architecture rules in Java projects. Deply serves a similar purpose but is designed specifically for Python\u2019s idioms and ecosystems. Deply\u2019s flexible configuration and Python-oriented collectors cater directly to Python developers\u2019 needs, whereas ArchUnit remains tied closely to Java\u2019s conventions.\n\n# What's New in 0.5.1?\n\n1. **New Collectors** More versatile collectors now let you define conditions for class and function selection with greater precision, making it easier to adapt Deply to your specific frameworks and coding patterns.\n2. **10x Performance Improvement** We've significantly optimized the analysis process. Deply now runs about 10 times faster than the first version, ensuring that integrating it into your CI/CD pipelines won't slow you down.\n3. **Extended Rule Set** From inheritance and naming conventions to decorator usage, the enhanced rule system provides finer control over maintaining architectural integrity.\n\n# Example: Simple Django API Views and Models Layer Checker\n\n    deply:\n      paths:\n        - /Users/a.abuladze/pinup/pinup-teams/pinup_teams\n    \n      exclude_files:\n        - \".*\\\\.venv/.*\"\n    \n      layers:\n        - name: models\n          collectors:\n            - type: bool\n              any_of:\n                - type: class_inherits\n                  base_class: \"django.db.models.Model\"\n                - type: class_inherits\n                  base_class: \"django.contrib.auth.models.AbstractUser\"\n    \n        - name: views\n          collectors:\n            - type: file_regex\n              regex: \".*/views_api.py\"\n    \n      ruleset:\n        views:\n          disallow_layer_dependencies:\n            - models\n          enforce_function_decorator_usage:\n            - type: bool\n              any_of:\n                - type: bool\n                  must:\n                    - type: function_decorator_name_regex\n                      decorator_name_regex: \"^HasPerm$\"\n                    - type: function_decorator_name_regex\n                      decorator_name_regex: \"^extend_schema$\"\n                - type: function_decorator_name_regex\n                  decorator_name_regex: \"^staticmethod$\"\n\n**What this does:**\n\n* Ensures that your views\\_api.py file belongs to the views layer and can't depend on models.\n* Requires view functions to use certain decorators (**HasPerm** and **extend\\_schema** together, or **staticmethod** as a fallback).\n\n&gt;*Note: These examples are not calls to action; they're hypothetical and depend entirely on your project's structure, architecture, and your team's preferences.*\n\n# Additional Examples\n\n# Class Naming Rule:\n\n    service:\n      enforce_class_naming:\n        - type: class_name_regex\n          class_name_regex: \".*Service\"\n\nClasses in the service layer must have names ending with Service.\n\n# Function Naming Rule:\n\n    tasks:\n      enforce_function_naming:\n        - type: function_name_regex\n          function_name_regex: \"task_.*\"\n\nFunctions in the tasks layer must start with task\\_.\n\nAgain, these are just hypothetical configurations. Every team and project has different needs, so you can tailor Deply's rules to fit your unique architectural guidelines.\n\n# Rules Overview\n\n* `disallow_layer_dependencies`: Prevent certain layers from referencing other layers.\n* `enforce_function_decorator_usage`: Ensure functions use specified decorators.\n* `enforce_class_decorator_usage`: Require classes to have certain decorators.\n* `enforce_class_naming`: Enforce naming conventions for classes.\n* `enforce_function_naming`: Enforce naming conventions for functions.\n* `enforce_inheritance`: Ensure that classes inherit from specified base classes.\n* `bool` rules (must, any\\_of, must\\_not): Combine multiple conditions for complex logic.\n\n# Collectors Overview\n\n* `bool`: Combine other collectors with logical conditions (must, any\\_of, must\\_not).\n* `class_inherits`: Select classes that inherit from a given base class.\n* `class_name_regex`: Select classes matching a specific regex pattern.\n* `function_name_regex`: Select functions matching a specific regex pattern.\n* `decorator_usage`: Select classes or functions based on their decorators.\n* `directory`: Select elements (classes, functions, variables) from specific directories.\n* `file_regex`: Select elements from files that match a given regex pattern.\n\n# Check the README\n\nFor detailed explanations, usage guides, and more examples, please visit the Deply GitHub Repository and check out the README.\n\n# Links\n\n* **GitHub**: [https://github.com/Vashkatsi/deply](https://github.com/Vashkatsi/deply)\n* **PyPI**: [https://pypi.org/project/deply/](https://pypi.org/project/deply/)\n\nThank you all for your support and interest! I'm looking forward to your feedback and contributions. Your involvement helps shape Deply into a stronger, more valuable tool for the community.\n\n**Happy coding!**", "author_fullname": "t2_3ie03pp2", "saved": false, "mod_reason_title": null, "gilded": 0, "clicked": false, "title": "Deply 0.5.1 Released: New Collectors, 10x Performance Boost, and Stronger Architectural Rules", "link_flair_richtext": [{"e": "text", "t": "Showcase"}], "subreddit_name_prefixed": "r/Python", "hidden": false, "pwls": 6, "link_flair_css_class": "showcase", "downs": 0, "thumbnail_height": null, "top_awarded_type": null, "hide_score": false, "name": "t3_1h9qjjj", "quarantine": false, "link_flair_text_color": "light", "upvote_ratio": 0.9, "author_flair_background_color": null, "subreddit_type": "public", "ups": 57, "total_awards_received": 0, "media_embed": {}, "thumbnail_width": null, "author_flair_template_id": null, "is_original_content": false, "user_reports": [], "secure_media": null, "is_reddit_media_domain": false, "is_meta": false, "category": null, "secure_media_embed": {}, "link_flair_text": "Showcase", "can_mod_post": false, "score": 57, "approved_by": null, "is_created_from_ads_ui": false, "author_premium": false, "thumbnail": "self", "edited": false, "author_flair_css_class": null, "author_flair_richtext": [], "gildings": {}, "post_hint": "self", "content_categories": null, "is_self": true, "mod_note": null, "created": 1733685876.0, "link_flair_type": "richtext", "wls": 6, "removed_by_category": null, "banned_by": null, "author_flair_type": "text", "domain": "self.Python", "allow_live_comments": false, "selftext_html": "&lt;!-- SC_OFF --&gt;&lt;div class=\"md\"&gt;&lt;p&gt;Hello everyone,&lt;/p&gt;\n\n&lt;p&gt;It&amp;#39;s Archil again, checking in from Wroc\u0142aw, Poland. I&amp;#39;m excited to announce the release of Deply 0.5.1, an updated version of my Python tool for enforcing architectural patterns and dependencies in larger codebases. I&amp;#39;ve noticed steady downloads since the previous post, and I&amp;#39;m genuinely grateful to everyone who has tried Deply or provided feedback.&lt;/p&gt;\n\n&lt;h1&gt;What My Project Does&lt;/h1&gt;\n\n&lt;p&gt;For those new here &lt;a href=\"https://www.reddit.com/r/Python/comments/1gthdpy/deply_keep_your_python_architecture_clean/\"&gt;here is my previous post&lt;/a&gt;, Deply analyzes your code structure and verifies that your Python project adheres to a defined architecture. You specify layers, set rules, and Deply enforces them\u2014helping maintain clean, modular, and maintainable code as your project grows.&lt;/p&gt;\n\n&lt;h1&gt;Target Audience&lt;/h1&gt;\n\n&lt;p&gt;Ideal for developers and teams building medium to large Python applications who need to maintain clear, enforceable architectural boundaries. It also suits those aiming to teach or learn best practices.&lt;/p&gt;\n\n&lt;h1&gt;Comparison to Other Tools&lt;/h1&gt;\n\n&lt;p&gt;\u2022 &lt;strong&gt;pydeps:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Focus:&lt;/em&gt; Visualization of dependencies&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Comparison:&lt;/em&gt; pydeps provides a visual map of imports, helping you understand how parts of your code relate. Deply goes further by actively enforcing rules on these dependencies, ensuring that your project structure adheres to architectural guidelines instead of merely displaying it.&lt;/p&gt;\n\n&lt;p&gt;\u2022 &lt;strong&gt;import-linter:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Focus:&lt;/em&gt; Import-based dependency constraints&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Comparison:&lt;/em&gt; import-linter is excellent for managing import hierarchies and preventing forbidden dependencies. Deply builds on this approach by supporting additional collectors (class inheritance, decorators, file patterns) and more complex rules, making it easier to define rich architectural standards beyond imports.&lt;/p&gt;\n\n&lt;p&gt;\u2022 &lt;strong&gt;pytest-archon:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Focus:&lt;/em&gt; Architectural checks integrated into pytest&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Comparison:&lt;/em&gt; pytest-archon provides Pythonic tests for architectural constraints. While it\u2019s great for projects already using pytest, Deply is a standalone tool that can integrate with any CI pipeline or workflow. Deply\u2019s configuration-driven approach and broader set of collectors and rules allow for more flexible and layered architecture definitions.&lt;/p&gt;\n\n&lt;p&gt;\u2022 &lt;strong&gt;pytestarch:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Focus:&lt;/em&gt; ArchUnit-inspired checks for Python using pytest&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Comparison:&lt;/em&gt; pytestarch mimics the style of Java\u2019s ArchUnit, letting you write tests for architectural constraints. Deply\u2019s YAML configuration and layer-based modeling approach differ by providing a domain-specific language for architecture, reducing the need to write code-based tests and offering more straightforward integration for non-test environments.&lt;/p&gt;\n\n&lt;p&gt;\u2022 &lt;strong&gt;Tach (Rust-based):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Focus:&lt;/em&gt; Architecture checks written in Rust&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Comparison:&lt;/em&gt; Tach brings a Rust-based perspective on architecture enforcement. Deply, being Python-native, integrates more seamlessly into Python ecosystems. Deply also provides Python-specific collectors and is tailored for Python\u2019s dynamic nature, whereas Tach, being language-agnostic and built in Rust, may require additional steps or adaptations for Python-specific patterns.&lt;/p&gt;\n\n&lt;p&gt;\u2022 &lt;strong&gt;ArchUnit (Java-focused):&lt;/strong&gt;&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Focus:&lt;/em&gt; Architecture rules for Java codebases&lt;/p&gt;\n\n&lt;p&gt;&lt;em&gt;Comparison:&lt;/em&gt; ArchUnit excels at defining and enforcing architecture rules in Java projects. Deply serves a similar purpose but is designed specifically for Python\u2019s idioms and ecosystems. Deply\u2019s flexible configuration and Python-oriented collectors cater directly to Python developers\u2019 needs, whereas ArchUnit remains tied closely to Java\u2019s conventions.&lt;/p&gt;\n\n&lt;h1&gt;What&amp;#39;s New in 0.5.1?&lt;/h1&gt;\n\n&lt;ol&gt;\n&lt;li&gt;&lt;strong&gt;New Collectors&lt;/strong&gt; More versatile collectors now let you define conditions for class and function selection with greater precision, making it easier to adapt Deply to your specific frameworks and coding patterns.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;10x Performance Improvement&lt;/strong&gt; We&amp;#39;ve significantly optimized the analysis process. Deply now runs about 10 times faster than the first version, ensuring that integrating it into your CI/CD pipelines won&amp;#39;t slow you down.&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;Extended Rule Set&lt;/strong&gt; From inheritance and naming conventions to decorator usage, the enhanced rule system provides finer control over maintaining architectural integrity.&lt;/li&gt;\n&lt;/ol&gt;\n\n&lt;h1&gt;Example: Simple Django API Views and Models Layer Checker&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;deply:\n  paths:\n    - /Users/a.abuladze/pinup/pinup-teams/pinup_teams\n\n  exclude_files:\n    - &amp;quot;.*\\\\.venv/.*&amp;quot;\n\n  layers:\n    - name: models\n      collectors:\n        - type: bool\n          any_of:\n            - type: class_inherits\n              base_class: &amp;quot;django.db.models.Model&amp;quot;\n            - type: class_inherits\n              base_class: &amp;quot;django.contrib.auth.models.AbstractUser&amp;quot;\n\n    - name: views\n      collectors:\n        - type: file_regex\n          regex: &amp;quot;.*/views_api.py&amp;quot;\n\n  ruleset:\n    views:\n      disallow_layer_dependencies:\n        - models\n      enforce_function_decorator_usage:\n        - type: bool\n          any_of:\n            - type: bool\n              must:\n                - type: function_decorator_name_regex\n                  decorator_name_regex: &amp;quot;^HasPerm$&amp;quot;\n                - type: function_decorator_name_regex\n                  decorator_name_regex: &amp;quot;^extend_schema$&amp;quot;\n            - type: function_decorator_name_regex\n              decorator_name_regex: &amp;quot;^staticmethod$&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;&lt;strong&gt;What this does:&lt;/strong&gt;&lt;/p&gt;\n\n&lt;ul&gt;\n&lt;li&gt;Ensures that your views_api.py file belongs to the views layer and can&amp;#39;t depend on models.&lt;/li&gt;\n&lt;li&gt;Requires view functions to use certain decorators (&lt;strong&gt;HasPerm&lt;/strong&gt; and &lt;strong&gt;extend_schema&lt;/strong&gt; together, or &lt;strong&gt;staticmethod&lt;/strong&gt; as a fallback).&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;blockquote&gt;\n&lt;p&gt;&lt;em&gt;Note: These examples are not calls to action; they&amp;#39;re hypothetical and depend entirely on your project&amp;#39;s structure, architecture, and your team&amp;#39;s preferences.&lt;/em&gt;&lt;/p&gt;\n&lt;/blockquote&gt;\n\n&lt;h1&gt;Additional Examples&lt;/h1&gt;\n\n&lt;h1&gt;Class Naming Rule:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;service:\n  enforce_class_naming:\n    - type: class_name_regex\n      class_name_regex: &amp;quot;.*Service&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Classes in the service layer must have names ending with Service.&lt;/p&gt;\n\n&lt;h1&gt;Function Naming Rule:&lt;/h1&gt;\n\n&lt;pre&gt;&lt;code&gt;tasks:\n  enforce_function_naming:\n    - type: function_name_regex\n      function_name_regex: &amp;quot;task_.*&amp;quot;\n&lt;/code&gt;&lt;/pre&gt;\n\n&lt;p&gt;Functions in the tasks layer must start with task_.&lt;/p&gt;\n\n&lt;p&gt;Again, these are just hypothetical configurations. Every team and project has different needs, so you can tailor Deply&amp;#39;s rules to fit your unique architectural guidelines.&lt;/p&gt;\n\n&lt;h1&gt;Rules Overview&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;disallow_layer_dependencies&lt;/code&gt;: Prevent certain layers from referencing other layers.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;enforce_function_decorator_usage&lt;/code&gt;: Ensure functions use specified decorators.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;enforce_class_decorator_usage&lt;/code&gt;: Require classes to have certain decorators.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;enforce_class_naming&lt;/code&gt;: Enforce naming conventions for classes.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;enforce_function_naming&lt;/code&gt;: Enforce naming conventions for functions.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;enforce_inheritance&lt;/code&gt;: Ensure that classes inherit from specified base classes.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;bool&lt;/code&gt; rules (must, any_of, must_not): Combine multiple conditions for complex logic.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Collectors Overview&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;code&gt;bool&lt;/code&gt;: Combine other collectors with logical conditions (must, any_of, must_not).&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;class_inherits&lt;/code&gt;: Select classes that inherit from a given base class.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;class_name_regex&lt;/code&gt;: Select classes matching a specific regex pattern.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;function_name_regex&lt;/code&gt;: Select functions matching a specific regex pattern.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;decorator_usage&lt;/code&gt;: Select classes or functions based on their decorators.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;directory&lt;/code&gt;: Select elements (classes, functions, variables) from specific directories.&lt;/li&gt;\n&lt;li&gt;&lt;code&gt;file_regex&lt;/code&gt;: Select elements from files that match a given regex pattern.&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;h1&gt;Check the README&lt;/h1&gt;\n\n&lt;p&gt;For detailed explanations, usage guides, and more examples, please visit the Deply GitHub Repository and check out the README.&lt;/p&gt;\n\n&lt;h1&gt;Links&lt;/h1&gt;\n\n&lt;ul&gt;\n&lt;li&gt;&lt;strong&gt;GitHub&lt;/strong&gt;: &lt;a href=\"https://github.com/Vashkatsi/deply\"&gt;https://github.com/Vashkatsi/deply&lt;/a&gt;&lt;/li&gt;\n&lt;li&gt;&lt;strong&gt;PyPI&lt;/strong&gt;: &lt;a href=\"https://pypi.org/project/deply/\"&gt;https://pypi.org/project/deply/&lt;/a&gt;&lt;/li&gt;\n&lt;/ul&gt;\n\n&lt;p&gt;Thank you all for your support and interest! I&amp;#39;m looking forward to your feedback and contributions. Your involvement helps shape Deply into a stronger, more valuable tool for the community.&lt;/p&gt;\n\n&lt;p&gt;&lt;strong&gt;Happy coding!&lt;/strong&gt;&lt;/p&gt;\n&lt;/div&gt;&lt;!-- SC_ON --&gt;", "likes": null, "suggested_sort": null, "banned_at_utc": null, "view_count": null, "archived": false, "no_follow": false, "is_crosspostable": true, "pinned": false, "over_18": false, "preview": {"images": [{"source": {"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?auto=webp&amp;s=5080bfbc5874f8d6f893543083c735d8283e0662", "width": 1200, "height": 600}, "resolutions": [{"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?width=108&amp;crop=smart&amp;auto=webp&amp;s=2b1ffecf2283347829f760131287d02f3f3d0c24", "width": 108, "height": 54}, {"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?width=216&amp;crop=smart&amp;auto=webp&amp;s=1ad4db22349a5e3d7213fccb146b317e6593ce3c", "width": 216, "height": 108}, {"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?width=320&amp;crop=smart&amp;auto=webp&amp;s=6afaf3adc0449ab6537a9b00446c16a03b17980b", "width": 320, "height": 160}, {"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?width=640&amp;crop=smart&amp;auto=webp&amp;s=f80d76b9b1042633abd5675164e5b5bf07079fe2", "width": 640, "height": 320}, {"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?width=960&amp;crop=smart&amp;auto=webp&amp;s=f3fe10234f15085f2b417b014600c3764a3637a7", "width": 960, "height": 480}, {"url": "https://external-preview.redd.it/w1_35KJQCUd2l7t3aMDljBeSFT9CZK8W5dhMHbqGSUM.jpg?width=1080&amp;crop=smart&amp;auto=webp&amp;s=1fa42e7f7344b608872a60c53f5c2476e18102d9", "width": 1080, "height": 540}], "variants": {}, "id": "4--Lvlmv57h-CyxzgJkwygKNnkqfoZY9RlwIzekDMv8"}], "enabled": false}, "all_awardings": [], "awarders": [], "media_only": false, "link_flair_template_id": "f35fb004-c1ff-11ee-8305-565bc5d0cc73", "can_gild": false, "spoiler": false, "locked": false, "author_flair_text": null, "treatment_tags": [], "visited": false, "removed_by": null, "num_reports": null, "distinguished": null, "subreddit_id": "t5_2qh0y", "author_is_blocked": false, "mod_reason_by": null, "removal_reason": null, "link_flair_background_color": "#ff66ac", "id": "1h9qjjj", "is_robot_indexable": true, "report_reasons": null, "author": "vashkatsi", "discussion_type": null, "num_comments": 1, "send_replies": true, "contest_mode": false, "mod_reports": [], "author_patreon_flair": false, "author_flair_text_color": null, "permalink": "/r/Python/comments/1h9qjjj/deply_051_released_new_collectors_10x_performance/", "stickied": false, "url": "https://www.reddit.com/r/Python/comments/1h9qjjj/deply_051_released_new_collectors_10x_performance/", "subreddit_subscribers": 1301717, "created_utc": 1733685876.0, "num_crossposts": 0, "media": null, "is_video": false}}], "before": null}}